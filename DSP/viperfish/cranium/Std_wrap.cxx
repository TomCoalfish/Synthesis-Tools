/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Std__Anything swig_types[0]
#define SWIGTYPE_p_Std__BasicType swig_types[1]
#define SWIGTYPE_p_Std__StdBitVector swig_types[2]
#define SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t swig_types[3]
#define SWIGTYPE_p_Std__StdMatrixT_double_t swig_types[4]
#define SWIGTYPE_p_Std__StdMatrixT_float_t swig_types[5]
#define SWIGTYPE_p_Std__StdMatrixT_int_t swig_types[6]
#define SWIGTYPE_p_Std__StdMatrixT_long_long_t swig_types[7]
#define SWIGTYPE_p_Std__StdMatrixT_short_t swig_types[8]
#define SWIGTYPE_p_Std__StdMatrixT_signed_char_t swig_types[9]
#define SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t swig_types[10]
#define SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t swig_types[11]
#define SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t swig_types[12]
#define SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t swig_types[13]
#define SWIGTYPE_p_Std__StdObject swig_types[14]
#define SWIGTYPE_p_Std__StdRandom swig_types[15]
#define SWIGTYPE_p_Std__StdRandomUniform swig_types[16]
#define SWIGTYPE_p_Std__StdRandomUniform64 swig_types[17]
#define SWIGTYPE_p_Std__StdString swig_types[18]
#define SWIGTYPE_p_Std__StdStringMap swig_types[19]
#define SWIGTYPE_p_Std__StdVectorT_Std__StdString_t swig_types[20]
#define SWIGTYPE_p_Std__StdVectorT_double_t swig_types[21]
#define SWIGTYPE_p_Std__StdVectorT_float_t swig_types[22]
#define SWIGTYPE_p_Std__StdVectorT_int_t swig_types[23]
#define SWIGTYPE_p_Std__StdVectorT_long_long_t swig_types[24]
#define SWIGTYPE_p_Std__StdVectorT_short_t swig_types[25]
#define SWIGTYPE_p_Std__StdVectorT_signed_char_t swig_types[26]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_char_t swig_types[27]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_int_t swig_types[28]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t swig_types[29]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_short_t swig_types[30]
#define SWIGTYPE_p_double swig_types[31]
#define SWIGTYPE_p_float swig_types[32]
#define SWIGTYPE_p_int swig_types[33]
#define SWIGTYPE_p_int64_t swig_types[34]
#define SWIGTYPE_p_long_long swig_types[35]
#define SWIGTYPE_p_short swig_types[36]
#define SWIGTYPE_p_signed_char swig_types[37]
#define SWIGTYPE_p_std__initializer_listT_Std__StdString_t swig_types[38]
#define SWIGTYPE_p_std__initializer_listT_double_t swig_types[39]
#define SWIGTYPE_p_std__initializer_listT_float_t swig_types[40]
#define SWIGTYPE_p_std__initializer_listT_int_t swig_types[41]
#define SWIGTYPE_p_std__initializer_listT_long_long_t swig_types[42]
#define SWIGTYPE_p_std__initializer_listT_short_t swig_types[43]
#define SWIGTYPE_p_std__initializer_listT_signed_char_t swig_types[44]
#define SWIGTYPE_p_std__initializer_listT_unsigned_char_t swig_types[45]
#define SWIGTYPE_p_std__initializer_listT_unsigned_int_t swig_types[46]
#define SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t swig_types[47]
#define SWIGTYPE_p_std__initializer_listT_unsigned_short_t swig_types[48]
#define SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t swig_types[49]
#define SWIGTYPE_p_std__string swig_types[50]
#define SWIGTYPE_p_std__vectorT_Std__StdString_t swig_types[51]
#define SWIGTYPE_p_std__vectorT_bool_t swig_types[52]
#define SWIGTYPE_p_std__vectorT_char_t swig_types[53]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[54]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[55]
#define SWIGTYPE_p_std__vectorT_int64_t_t swig_types[56]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[57]
#define SWIGTYPE_p_std__vectorT_long_double_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_long_long_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[60]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_uint64_t_t swig_types[63]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[64]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[65]
#define SWIGTYPE_p_std__vectorT_unsigned_long_long_t swig_types[66]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[67]
#define SWIGTYPE_p_uint64_t swig_types[68]
#define SWIGTYPE_p_unsigned_char swig_types[69]
#define SWIGTYPE_p_unsigned_int swig_types[70]
#define SWIGTYPE_p_unsigned_long_long swig_types[71]
#define SWIGTYPE_p_unsigned_short swig_types[72]
#define SWIGTYPE_p_void swig_types[73]
static swig_type_info *swig_types[75];
static swig_module_info swig_module = {swig_types, 74, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Std"
#define SWIG_init      luaopen_Std
#define SWIG_init_user luaopen_Std_user

#define SWIG_LUACODE   luaopen_Std_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "Std/StdObject.h"
#include "Std/Std.h"   
#include "Std/datalogic.h"
#include "Std/StdCsv.h" 
#include "Std/StdJson.h"
#include "Std/StdFileSystem.h"
#include "Std/StdPosix.h"
#include "Std/StdMath.h"
#include "Std/StdPlot.h"
#include "Std/StdAssocMap.h"
#include "Std/StdCBuffer.h"
#include "Std/StdComplex.h"
#include "Std/StdScalar.h"
#include "Std/StdDeque.h"
#include "Std/StdForwardList.h"
#include "Std/StdList.h"
#include "Std/StdRandom.h"
#include "Std/StdQueue.h"
#include "Std/StdSet.h"
#include "Std/StdStack.h"
#include "Std/StdDir.h"
#include "Std/StdFile.h"
#include "Std/StdValArray.h"
#include "Std/StdVecarray.h"
#include "SQLite++/sqlite3pp.h"

using namespace Std;


    typedef signed char int8_t;
    typedef unsigned char uint8_t;
    typedef signed short int16_t;
    typedef unsigned short uint16_t;
    typedef signed int int32_t;
    typedef unsigned int uint32_t;
    typedef signed long long i64_t;
    typedef unsigned long long u64_t;


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_StdObject_name(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdObject::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::name",1,"Std::StdObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_name",1,SWIGTYPE_p_Std__StdObject);
  }
  
  result = ((Std::StdObject const *)arg1)->name();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_save(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdObject::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::save",1,"Std::StdObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdObject::save",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_save",1,SWIGTYPE_p_Std__StdObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdObject_save",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->save(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_load(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdObject::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::load",1,"Std::StdObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdObject::load",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_load",1,SWIGTYPE_p_Std__StdObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdObject_load",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->load(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_str(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdObject::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::str",1,"Std::StdObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_str",1,SWIGTYPE_p_Std__StdObject);
  }
  
  result = ((Std::StdObject const *)arg1)->str();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_ptr(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Std::StdObject::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::ptr",1,"Std::StdObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_ptr",1,SWIGTYPE_p_Std__StdObject);
  }
  
  result = (void *)((Std::StdObject const *)arg1)->ptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdObject(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *result = 0 ;
  
  SWIG_check_num_args("Std::StdObject::StdObject",0,0)
  result = (Std::StdObject *)new Std::StdObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdObject(void *obj) {
Std::StdObject *arg1 = (Std::StdObject *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdObject(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdObject);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdObject_methods[]= {
    { "name", _wrap_StdObject_name},
    { "save", _wrap_StdObject_save},
    { "load", _wrap_StdObject_load},
    { "str", _wrap_StdObject_str},
    { "ptr", _wrap_StdObject_ptr},
    {0,0}
};
static swig_lua_method swig_StdObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdObject_Sf_SwigStatic = {
    "StdObject",
    swig_StdObject_Sf_SwigStatic_methods,
    swig_StdObject_Sf_SwigStatic_attributes,
    swig_StdObject_Sf_SwigStatic_constants,
    swig_StdObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdObject_bases[] = {0};
static const char *swig_StdObject_base_names[] = {0};
static swig_lua_class _wrap_class_StdObject = { "StdObject", "StdObject", &SWIGTYPE_p_Std__StdObject,_proxy__wrap_new_StdObject, swig_delete_StdObject, swig_StdObject_methods, swig_StdObject_attributes, &swig_StdObject_Sf_SwigStatic, swig_StdObject_meta, swig_StdObject_bases, swig_StdObject_base_names };

static int _wrap_randint(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Std::randint",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::randint",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::randint",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)Std::randint(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randint64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("Std::randint64",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::randint64",1,"int64_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::randint64",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("randint64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("randint64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = Std::randint64(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randchar(lua_State* L) {
  int SWIG_arg = 0;
  char result;
  
  SWIG_check_num_args("Std::randchar",0,0)
  result = (char)Std::randchar();
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randfloat(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Std::randfloat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::randfloat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::randfloat",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)Std::randfloat(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randdbl(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::randdbl",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::randdbl",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::randdbl",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)Std::randdbl(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flip__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool result;
  
  SWIG_check_num_args("Std::flip",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::flip",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (bool)Std::flip(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flip__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("Std::flip",0,0)
  result = (bool)Std::flip();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flip(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_flip__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_flip__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'flip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::flip(double)\n"
    "    Std::flip()\n");
  lua_error(L);return 0;
}


static int _wrap_new_StdRandom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t *argp1 ;
  Std::StdRandom *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandom::StdRandom",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdRandom::StdRandom",1,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("new_StdRandom",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  result = (Std::StdRandom *)new Std::StdRandom(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdRandom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandom::StdRandom",0,0)
  result = (Std::StdRandom *)new Std::StdRandom();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdRandom(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StdRandom__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StdRandom__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StdRandom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdRandom::StdRandom(int64_t)\n"
    "    Std::StdRandom::StdRandom()\n");
  lua_error(L);return 0;
}


static int _wrap_StdRandom_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandom::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::rand",1,"Std::StdRandom *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_rand",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  result = (float)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randi(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::StdRandom::randi",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randi",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::randi",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandom::randi",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randi",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->randi(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randi64(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t *argp2 ;
  int64_t *argp3 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdRandom::randi64",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randi64",1,"Std::StdRandom *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdRandom::randi64",2,"int64_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdRandom::randi64",3,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randi64",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("StdRandom_randi64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("StdRandom_randi64",3,SWIGTYPE_p_int64_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->randi64(arg2,arg3);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randf32(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandom::randf32",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randf32",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::randf32",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandom::randf32",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randf32",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->randf32(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randf64(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::StdRandom::randf64",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randf64",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::randf64",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandom::randf64",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randf64",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->randf64(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_flip__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::StdRandom::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::flip",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::flip",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_flip",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->flip(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_flip__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdRandom::flip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::flip",1,"Std::StdRandom *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_flip",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  result = (bool)(arg1)->flip();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_flip(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdRandom_flip__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdRandom_flip__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdRandom_flip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdRandom::flip(double)\n"
    "    Std::StdRandom::flip()\n");
  lua_error(L);return 0;
}


static void swig_delete_StdRandom(void *obj) {
Std::StdRandom *arg1 = (Std::StdRandom *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdRandom(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdRandom);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdRandom_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdRandom_methods[]= {
    { "rand", _wrap_StdRandom_rand},
    { "randi", _wrap_StdRandom_randi},
    { "randi64", _wrap_StdRandom_randi64},
    { "randf32", _wrap_StdRandom_randf32},
    { "randf64", _wrap_StdRandom_randf64},
    { "flip", _wrap_StdRandom_flip},
    {0,0}
};
static swig_lua_method swig_StdRandom_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdRandom_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdRandom_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdRandom_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdRandom_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdRandom_Sf_SwigStatic = {
    "StdRandom",
    swig_StdRandom_Sf_SwigStatic_methods,
    swig_StdRandom_Sf_SwigStatic_attributes,
    swig_StdRandom_Sf_SwigStatic_constants,
    swig_StdRandom_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdRandom_bases[] = {0};
static const char *swig_StdRandom_base_names[] = {0};
static swig_lua_class _wrap_class_StdRandom = { "StdRandom", "StdRandom", &SWIGTYPE_p_Std__StdRandom,_proxy__wrap_new_StdRandom, swig_delete_StdRandom, swig_StdRandom_methods, swig_StdRandom_attributes, &swig_StdRandom_Sf_SwigStatic, swig_StdRandom_meta, swig_StdRandom_bases, swig_StdRandom_base_names };

static int _wrap_new_StdRandomUniform(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform::StdRandomUniform",0,0)
  result = (Std::StdRandomUniform *)new Std::StdRandomUniform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandomUniform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandomUniform::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::operator ()",1,"Std::StdRandomUniform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform___call",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandomUniform::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::random",1,"Std::StdRandomUniform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform_random",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  result = (float)(arg1)->random();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandomUniform::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::random",1,"Std::StdRandomUniform *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandomUniform::random",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandomUniform::random",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform_random",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->random(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandomUniform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdRandomUniform_random__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandomUniform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdRandomUniform_random__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdRandomUniform_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdRandomUniform::random()\n"
    "    Std::StdRandomUniform::random(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_StdRandomUniform_process(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::process",1,"Std::StdRandomUniform *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandomUniform::process",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdRandomUniform::process",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform_process",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("StdRandomUniform_process",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->process(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdRandomUniform(void *obj) {
Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdRandomUniform(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdRandomUniform);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdRandomUniform_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdRandomUniform_methods[]= {
    { "__call", _wrap_StdRandomUniform___call},
    { "random", _wrap_StdRandomUniform_random},
    { "process", _wrap_StdRandomUniform_process},
    {0,0}
};
static swig_lua_method swig_StdRandomUniform_meta[] = {
    { "__call", _wrap_StdRandomUniform___call},
    {0,0}
};

static swig_lua_attribute swig_StdRandomUniform_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdRandomUniform_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdRandomUniform_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdRandomUniform_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdRandomUniform_Sf_SwigStatic = {
    "StdRandomUniform",
    swig_StdRandomUniform_Sf_SwigStatic_methods,
    swig_StdRandomUniform_Sf_SwigStatic_attributes,
    swig_StdRandomUniform_Sf_SwigStatic_constants,
    swig_StdRandomUniform_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdRandomUniform_bases[] = {0};
static const char *swig_StdRandomUniform_base_names[] = {0};
static swig_lua_class _wrap_class_StdRandomUniform = { "StdRandomUniform", "StdRandomUniform", &SWIGTYPE_p_Std__StdRandomUniform,_proxy__wrap_new_StdRandomUniform, swig_delete_StdRandomUniform, swig_StdRandomUniform_methods, swig_StdRandomUniform_attributes, &swig_StdRandomUniform_Sf_SwigStatic, swig_StdRandomUniform_meta, swig_StdRandomUniform_bases, swig_StdRandomUniform_base_names };

static int _wrap_new_StdRandomUniform64(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform64::StdRandomUniform64",0,0)
  result = (Std::StdRandomUniform64 *)new Std::StdRandomUniform64();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandomUniform64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform64___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdRandomUniform64::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform64::operator ()",1,"Std::StdRandomUniform64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform64,0))){
    SWIG_fail_ptr("StdRandomUniform64___call",1,SWIGTYPE_p_Std__StdRandomUniform64);
  }
  
  result = (arg1)->operator ()();
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform64_random(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdRandomUniform64::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform64::random",1,"Std::StdRandomUniform64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform64,0))){
    SWIG_fail_ptr("StdRandomUniform64_random",1,SWIGTYPE_p_Std__StdRandomUniform64);
  }
  
  result = (arg1)->random();
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform64_process(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) 0 ;
  size_t arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform64::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform64::process",1,"Std::StdRandomUniform64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandomUniform64::process",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdRandomUniform64::process",3,"std::vector< int64_t > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform64,0))){
    SWIG_fail_ptr("StdRandomUniform64_process",1,SWIGTYPE_p_Std__StdRandomUniform64);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("StdRandomUniform64_process",3,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  (arg1)->process(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdRandomUniform64(void *obj) {
Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdRandomUniform64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdRandomUniform64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdRandomUniform64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdRandomUniform64_methods[]= {
    { "__call", _wrap_StdRandomUniform64___call},
    { "random", _wrap_StdRandomUniform64_random},
    { "process", _wrap_StdRandomUniform64_process},
    {0,0}
};
static swig_lua_method swig_StdRandomUniform64_meta[] = {
    { "__call", _wrap_StdRandomUniform64___call},
    {0,0}
};

static swig_lua_attribute swig_StdRandomUniform64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdRandomUniform64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdRandomUniform64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdRandomUniform64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdRandomUniform64_Sf_SwigStatic = {
    "StdRandomUniform64",
    swig_StdRandomUniform64_Sf_SwigStatic_methods,
    swig_StdRandomUniform64_Sf_SwigStatic_attributes,
    swig_StdRandomUniform64_Sf_SwigStatic_constants,
    swig_StdRandomUniform64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdRandomUniform64_bases[] = {0};
static const char *swig_StdRandomUniform64_base_names[] = {0};
static swig_lua_class _wrap_class_StdRandomUniform64 = { "StdRandomUniform64", "StdRandomUniform64", &SWIGTYPE_p_Std__StdRandomUniform64,_proxy__wrap_new_StdRandomUniform64, swig_delete_StdRandomUniform64, swig_StdRandomUniform64_methods, swig_StdRandomUniform64_attributes, &swig_StdRandomUniform64_Sf_SwigStatic, swig_StdRandomUniform64_meta, swig_StdRandomUniform64_bases, swig_StdRandomUniform64_base_names };

static int _wrap_StdBitVector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  std::vector< bool > arg2 ;
  std::vector< bool > *argp2 ;
  
  SWIG_check_num_args("Std::StdBitVector::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::vec",1,"Std::StdBitVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdBitVector::vec",2,"std::vector< bool >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_vec_set",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("StdBitVector_vec_set",2,SWIGTYPE_p_std__vectorT_bool_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  std::vector< bool > result;
  
  SWIG_check_num_args("Std::StdBitVector::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::vec",1,"Std::StdBitVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_vec_get",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  result =  ((arg1)->vec);
  {
    std::vector< bool > * resultptr = new std::vector< bool >((const std::vector< bool > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_bool_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdBitVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *result = 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::StdBitVector",0,0)
  result = (Std::StdBitVector *)new Std::StdBitVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdBitVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdBitVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdBitVector *result = 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::StdBitVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdBitVector::StdBitVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdBitVector *)new Std::StdBitVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdBitVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdBitVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StdBitVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StdBitVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StdBitVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdBitVector::StdBitVector()\n"
    "    Std::StdBitVector::StdBitVector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_StdBitVector_flip(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdBitVector::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::flip",1,"Std::StdBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdBitVector::flip",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_flip",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->flip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdBitVector::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::set",1,"Std::StdBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdBitVector::set",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_set",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::StdBitVector::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::get",1,"Std::StdBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdBitVector::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_get",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->get(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdBitVector::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::size",1,"Std::StdBitVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_size",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  result = ((Std::StdBitVector const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_bytes(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdBitVector::bytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::bytes",1,"Std::StdBitVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_bytes",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  result = ((Std::StdBitVector const *)arg1)->bytes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_ptr(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::ptr",1,"Std::StdBitVector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdBitVector::ptr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_ptr",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"StdBitVector_ptr");
  (arg1)->ptr(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdBitVector(void *obj) {
Std::StdBitVector *arg1 = (Std::StdBitVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdBitVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdBitVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdBitVector_attributes[] = {
    { "vec", _wrap_StdBitVector_vec_get, _wrap_StdBitVector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_StdBitVector_methods[]= {
    { "flip", _wrap_StdBitVector_flip},
    { "set", _wrap_StdBitVector_set},
    { "get", _wrap_StdBitVector_get},
    { "size", _wrap_StdBitVector_size},
    { "bytes", _wrap_StdBitVector_bytes},
    { "ptr", _wrap_StdBitVector_ptr},
    {0,0}
};
static swig_lua_method swig_StdBitVector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdBitVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdBitVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdBitVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdBitVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdBitVector_Sf_SwigStatic = {
    "StdBitVector",
    swig_StdBitVector_Sf_SwigStatic_methods,
    swig_StdBitVector_Sf_SwigStatic_attributes,
    swig_StdBitVector_Sf_SwigStatic_constants,
    swig_StdBitVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdBitVector_bases[] = {0};
static const char *swig_StdBitVector_base_names[] = {0};
static swig_lua_class _wrap_class_StdBitVector = { "StdBitVector", "StdBitVector", &SWIGTYPE_p_Std__StdBitVector,_proxy__wrap_new_StdBitVector, swig_delete_StdBitVector, swig_StdBitVector_methods, swig_StdBitVector_attributes, &swig_StdBitVector_Sf_SwigStatic, swig_StdBitVector_meta, swig_StdBitVector_bases, swig_StdBitVector_base_names };

static int _wrap_StdString_str_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Std::StdString::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::str",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::str",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_str_set",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdString_str_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->str = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_str_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdString::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::str",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_str_get",1,SWIGTYPE_p_Std__StdString);
  }
  
  result =  ((arg1)->str);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",0,0)
  result = (Std::StdString *)new Std::StdString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::StdString::StdString",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::StdString *)new Std::StdString((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdString::StdString",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_StdString",1,SWIGTYPE_p_std__string);
  }
  
  result = (Std::StdString *)new Std::StdString((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdString::StdString",1,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("new_StdString",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (Std::StdString *)new Std::StdString((Std::StdString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StdString__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StdString__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StdString__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StdString__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StdString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::StdString()\n"
    "    Std::StdString::StdString(char const *)\n"
    "    Std::StdString::StdString(std::string const &)\n"
    "    Std::StdString::StdString(Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::data",1,"Std::StdString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_data",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (char *)((Std::StdString const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::size",1,"Std::StdString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_size",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = ((Std::StdString const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdString::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::empty",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_empty",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::clear",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_clear",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Std::StdString::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::insert",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::insert",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::StdString::insert",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->insert(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  char arg4 ;
  
  SWIG_check_num_args("Std::StdString::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::insert",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::insert",3,"size_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Std::StdString::insert",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_tostring(L, 4))[0];
  (arg1)->insert(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Std::StdString::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::fill",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::StdString::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_fill",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->fill(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdString::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::insert",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdString::insert",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->insert(arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdString_insert__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_StdString_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_StdString_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::insert(size_t,char)\n"
    "    Std::StdString::insert(size_t,size_t,char)\n"
    "    Std::StdString::insert(size_t,Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdString::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::erase",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_erase",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdString::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::erase",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_erase",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::erase(size_t,size_t)\n"
    "    Std::StdString::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdString::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::push_back",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_push_back",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char result;
  
  SWIG_check_num_args("Std::StdString::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::pop_back",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_pop_back",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (char)(arg1)->pop_back();
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdString::append",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::append",1,"Std::StdString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::StdString::append",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::append",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_append",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->append(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Std::StdString::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::append",1,"Std::StdString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::StdString::append",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_append",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->append(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_append(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_StdString_append__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_append__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::append(char,size_t)\n"
    "    Std::StdString::append(char)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_replace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString *arg4 = 0 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::replace",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::replace",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::StdString::replace",4,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_replace",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_replace",4,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->replace(arg2,arg3,(Std::StdString const &)*arg4);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdString::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::resize",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_resize",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_mutate(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::mutate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::mutate",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_mutate",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->mutate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_uniform_mutate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Std::StdString::uniform_mutate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::uniform_mutate",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::uniform_mutate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_uniform_mutate",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->uniform_mutate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_uniform_mutate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::uniform_mutate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::uniform_mutate",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_uniform_mutate",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->uniform_mutate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_uniform_mutate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdString_uniform_mutate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_uniform_mutate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_uniform_mutate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::uniform_mutate(float)\n"
    "    Std::StdString::uniform_mutate()\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_crossover(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdString::crossover",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::crossover",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::crossover",2,"Std::StdString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdString::crossover",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_crossover",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_crossover",2,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_crossover",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->crossover((Std::StdString const &)*arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_string(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::string",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_string",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (std::string *) &(arg1)->string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_substr(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::substr",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_substr",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::operator +",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::operator +",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___add",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___add",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->operator +((Std::StdString const &)*arg2);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string *arg2 = 0 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::operator +",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::operator +",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___add",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdString___add",2,SWIGTYPE_p_std__string);
  }
  
  result = (arg1)->operator +((std::string const &)*arg2);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StdString___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StdString___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::operator +(Std::StdString const &)\n"
    "    Std::StdString::operator +(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString___eq(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdString::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::operator ==",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::operator ==",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___eq",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___eq",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)(arg1)->operator ==((Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("Std::StdString::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int32",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int32",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int32_t)(arg1)->to_int32(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("Std::StdString::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int32",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int32",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (int32_t)(arg1)->to_int32();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdString_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::to_int32(int)\n"
    "    Std::StdString::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdString::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int64",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int64",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->to_int64(arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdString::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int64",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int64",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->to_int64();
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdString_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::to_int64(int)\n"
    "    Std::StdString::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_to_float(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdString::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_float",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_float",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (float)(arg1)->to_float();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_double(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::StdString::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_double",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_double",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (double)(arg1)->to_double();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::reverse",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_reverse",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::sort",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_sort",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::shuffle",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_shuffle",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_getline(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::getline",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_getline",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->getline();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::find",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::find",2,"Std::StdString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",2,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((Std::StdString const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::find",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::find",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->find((Std::StdString const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StdString_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::find(Std::StdString const &,size_t)\n"
    "    Std::StdString::find(Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::rfind",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::rfind",2,"Std::StdString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",2,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((Std::StdString const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::rfind",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::rfind",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->rfind((Std::StdString const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StdString_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::rfind(Std::StdString const &,size_t)\n"
    "    Std::StdString::rfind(Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_compare(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("Std::StdString::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::compare",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::compare",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_compare",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_compare",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (int)(arg1)->compare((Std::StdString const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdString(void *obj) {
Std::StdString *arg1 = (Std::StdString *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdString(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdString);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdString_attributes[] = {
    { "str", _wrap_StdString_str_get, _wrap_StdString_str_set },
    {0,0,0}
};
static swig_lua_method swig_StdString_methods[]= {
    { "data", _wrap_StdString_data},
    { "size", _wrap_StdString_size},
    { "empty", _wrap_StdString_empty},
    { "clear", _wrap_StdString_clear},
    { "fill", _wrap_StdString_fill},
    { "insert", _wrap_StdString_insert},
    { "erase", _wrap_StdString_erase},
    { "push_back", _wrap_StdString_push_back},
    { "pop_back", _wrap_StdString_pop_back},
    { "append", _wrap_StdString_append},
    { "replace", _wrap_StdString_replace},
    { "resize", _wrap_StdString_resize},
    { "mutate", _wrap_StdString_mutate},
    { "uniform_mutate", _wrap_StdString_uniform_mutate},
    { "crossover", _wrap_StdString_crossover},
    { "string", _wrap_StdString_string},
    { "substr", _wrap_StdString_substr},
    { "__add", _wrap_StdString___add},
    { "__eq", _wrap_StdString___eq},
    { "to_int32", _wrap_StdString_to_int32},
    { "to_int64", _wrap_StdString_to_int64},
    { "to_float", _wrap_StdString_to_float},
    { "to_double", _wrap_StdString_to_double},
    { "reverse", _wrap_StdString_reverse},
    { "sort", _wrap_StdString_sort},
    { "shuffle", _wrap_StdString_shuffle},
    { "getline", _wrap_StdString_getline},
    { "find", _wrap_StdString_find},
    { "rfind", _wrap_StdString_rfind},
    { "compare", _wrap_StdString_compare},
    {0,0}
};
static swig_lua_method swig_StdString_meta[] = {
    { "__add", _wrap_StdString___add},
    { "__eq", _wrap_StdString___eq},
    {0,0}
};

static swig_lua_attribute swig_StdString_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdString_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdString_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdString_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdString_Sf_SwigStatic = {
    "StdString",
    swig_StdString_Sf_SwigStatic_methods,
    swig_StdString_Sf_SwigStatic_attributes,
    swig_StdString_Sf_SwigStatic_constants,
    swig_StdString_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdString_bases[] = {0};
static const char *swig_StdString_base_names[] = {0};
static swig_lua_class _wrap_class_StdString = { "StdString", "StdString", &SWIGTYPE_p_Std__StdString,_proxy__wrap_new_StdString, swig_delete_StdString, swig_StdString_methods, swig_StdString_attributes, &swig_StdString_Sf_SwigStatic, swig_StdString_meta, swig_StdString_bases, swig_StdString_base_names };

static int _wrap___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::operator ==",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator ==",1,"Std::StdString const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator ==",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__eq",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__eq",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)Std::operator ==((Std::StdString const &)*arg1,(Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___lt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::operator <",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator <",1,"Std::StdString const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator <",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__lt",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__lt",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)Std::operator <((Std::StdString const &)*arg1,(Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_map_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  std::map< Std::StdString,Std::StdString > *arg2 = (std::map< Std::StdString,Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::map",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::map",1,"Std::StdStringMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdStringMap::map",2,"std::map< Std::StdString,Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_map_set",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t,0))){
    SWIG_fail_ptr("StdStringMap_map_set",2,SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t);
  }
  
  if (arg1) (arg1)->map = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_map_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  std::map< Std::StdString,Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::map",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::map",1,"Std::StdStringMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_map_get",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  result = (std::map< Std::StdString,Std::StdString > *)& ((arg1)->map);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdStringMap(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *result = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::StdStringMap",0,0)
  result = (Std::StdStringMap *)new Std::StdStringMap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdStringMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_contains(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdStringMap::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::contains",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::contains",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_contains",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_contains",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)(arg1)->contains((Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::at",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::at",2,"Std::StdString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_at",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_at",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (Std::StdString *) &(arg1)->at(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdStringMap::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::empty",1,"Std::StdStringMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_empty",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdStringMap::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::size",1,"Std::StdStringMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_size",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  result = ((Std::StdStringMap const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::clear",1,"Std::StdStringMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_clear",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_insert(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::insert",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::insert",2,"Std::StdString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdStringMap::insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_insert",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_insert",2,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdStringMap_insert",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->insert((Std::StdString const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_erase(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::erase",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::erase",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_erase",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_erase",2,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->erase((Std::StdString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdStringMap(void *obj) {
Std::StdStringMap *arg1 = (Std::StdStringMap *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdStringMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdStringMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdStringMap_attributes[] = {
    { "map", _wrap_StdStringMap_map_get, _wrap_StdStringMap_map_set },
    {0,0,0}
};
static swig_lua_method swig_StdStringMap_methods[]= {
    { "contains", _wrap_StdStringMap_contains},
    { "at", _wrap_StdStringMap_at},
    { "empty", _wrap_StdStringMap_empty},
    { "size", _wrap_StdStringMap_size},
    { "clear", _wrap_StdStringMap_clear},
    { "insert", _wrap_StdStringMap_insert},
    { "erase", _wrap_StdStringMap_erase},
    {0,0}
};
static swig_lua_method swig_StdStringMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdStringMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdStringMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdStringMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdStringMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdStringMap_SwigStatic = {
    "StdStringMap",
    swig_StdStringMap_SwigStatic_methods,
    swig_StdStringMap_SwigStatic_attributes,
    swig_StdStringMap_SwigStatic_constants,
    swig_StdStringMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdStringMap_bases[] = {0};
static const char *swig_StdStringMap_base_names[] = {0};
static swig_lua_class _wrap_class_StdStringMap = { "StdStringMap", "StdStringMap", &SWIGTYPE_p_Std__StdStringMap,_proxy__wrap_new_StdStringMap, swig_delete_StdStringMap, swig_StdStringMap_methods, swig_StdStringMap_attributes, &swig_StdStringMap_SwigStatic, swig_StdStringMap_meta, swig_StdStringMap_bases, swig_StdStringMap_base_names };

static int _wrap_Anything_c_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Std::Anything::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::c",1,"Std::Anything *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::Anything::c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_c_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_c_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  char result;
  
  SWIG_check_num_args("Std::Anything::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::c",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_c_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (char) ((arg1)->c);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_uc_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Std::Anything::uc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::uc",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::uc",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_uc_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->uc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_uc_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Std::Anything::uc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::uc",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_uc_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (unsigned char) ((arg1)->uc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i8_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int8_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::i8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i8",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::i8",2,"int8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i8_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (int8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i8 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i8_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int8_t result;
  
  SWIG_check_num_args("Std::Anything::i8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i8",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i8_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (int8_t) ((arg1)->i8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u8_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::u8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u8",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::u8",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u8_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->u8 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u8_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("Std::Anything::u8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u8",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u8_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (uint8_t) ((arg1)->u8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i16_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int16_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::i16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i16",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::i16",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i16_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (int16_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i16 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i16_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("Std::Anything::i16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i16",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i16_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (int16_t) ((arg1)->i16);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u16_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint16_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::u16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u16",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::u16",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u16_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint16_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->u16 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u16_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("Std::Anything::u16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u16",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u16_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (uint16_t) ((arg1)->u16);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i32_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int32_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::i32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i32",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::i32",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i32_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (int32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i32 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i32_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("Std::Anything::i32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i32",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i32_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (int32_t) ((arg1)->i32);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u32_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::u32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u32",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::u32",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u32_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->u32 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u32_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("Std::Anything::u32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u32",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u32_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (uint32_t) ((arg1)->u32);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i64_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("Std::Anything::i64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i64",1,"Std::Anything *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Anything::i64",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i64_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Anything_i64_set",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->i64 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i64_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::Anything::i64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i64",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i64_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result =  ((arg1)->i64);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u64_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  SWIG_check_num_args("Std::Anything::u64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u64",1,"Std::Anything *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Anything::u64",2,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u64_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint64_t,0))){
    SWIG_fail_ptr("Anything_u64_set",2,SWIGTYPE_p_uint64_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->u64 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u64_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint64_t result;
  
  SWIG_check_num_args("Std::Anything::u64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u64",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u64_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result =  ((arg1)->u64);
  {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Std::Anything::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::f",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::f",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_f_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::Anything::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::f",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_f_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (float) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Std::Anything::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::d",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::d",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_d_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::Anything::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::d",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_d_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (double) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Anything(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *result = 0 ;
  
  SWIG_check_num_args("Std::Anything::Anything",0,0)
  result = (Std::Anything *)new Std::Anything();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__Anything,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Anything(void *obj) {
Std::Anything *arg1 = (Std::Anything *) obj;
delete arg1;
}
static int _proxy__wrap_new_Anything(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Anything);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Anything_attributes[] = {
    { "c", _wrap_Anything_c_get, _wrap_Anything_c_set },
    { "uc", _wrap_Anything_uc_get, _wrap_Anything_uc_set },
    { "i8", _wrap_Anything_i8_get, _wrap_Anything_i8_set },
    { "u8", _wrap_Anything_u8_get, _wrap_Anything_u8_set },
    { "i16", _wrap_Anything_i16_get, _wrap_Anything_i16_set },
    { "u16", _wrap_Anything_u16_get, _wrap_Anything_u16_set },
    { "i32", _wrap_Anything_i32_get, _wrap_Anything_i32_set },
    { "u32", _wrap_Anything_u32_get, _wrap_Anything_u32_set },
    { "i64", _wrap_Anything_i64_get, _wrap_Anything_i64_set },
    { "u64", _wrap_Anything_u64_get, _wrap_Anything_u64_set },
    { "f", _wrap_Anything_f_get, _wrap_Anything_f_set },
    { "d", _wrap_Anything_d_get, _wrap_Anything_d_set },
    {0,0,0}
};
static swig_lua_method swig_Anything_methods[]= {
    {0,0}
};
static swig_lua_method swig_Anything_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Anything_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Anything_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Anything_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Anything_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Anything_Sf_SwigStatic = {
    "Anything",
    swig_Anything_Sf_SwigStatic_methods,
    swig_Anything_Sf_SwigStatic_attributes,
    swig_Anything_Sf_SwigStatic_constants,
    swig_Anything_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Anything_bases[] = {0};
static const char *swig_Anything_base_names[] = {0};
static swig_lua_class _wrap_class_Anything = { "Anything", "Anything", &SWIGTYPE_p_Std__Anything,_proxy__wrap_new_Anything, swig_delete_Anything, swig_Anything_methods, swig_Anything_attributes, &swig_Anything_Sf_SwigStatic, swig_Anything_meta, swig_Anything_bases, swig_Anything_base_names };

static int _wrap_BasicType_c_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Std::BasicType::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::c",1,"Std::BasicType *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::BasicType::c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_c_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_c_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  char result;
  
  SWIG_check_num_args("Std::BasicType::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::c",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_c_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (char) ((arg1)->c);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_b_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Std::BasicType::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::b",1,"Std::BasicType *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Std::BasicType::b",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_b_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_b_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BasicType::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::b",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_b_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (bool) ((arg1)->b);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Std::BasicType::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::d",1,"Std::BasicType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BasicType::d",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_d_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::BasicType::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::d",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_d_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (double) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ptr",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::ptr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ptr_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BasicType_ptr_set");
  if (arg1) (arg1)->ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ptr",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ptr_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (void *) ((arg1)->ptr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_str_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::str",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::str",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_str_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("BasicType_str_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->str = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_str_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::BasicType::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::str",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_str_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->str);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_char_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::char_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::char_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::char_vector",2,"std::vector< char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_char_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("BasicType_char_vector_set",2,SWIGTYPE_p_std__vectorT_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->char_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_char_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< char > result;
  
  SWIG_check_num_args("Std::BasicType::char_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::char_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_char_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->char_vector);
  {
    std::vector< char > * resultptr = new std::vector< char >((const std::vector< char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_byte_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::byte_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::byte_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::byte_vector",2,"std::vector< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_byte_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("BasicType_byte_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->byte_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_byte_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< unsigned char > result;
  
  SWIG_check_num_args("Std::BasicType::byte_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::byte_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_byte_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->byte_vector);
  {
    std::vector< unsigned char > * resultptr = new std::vector< unsigned char >((const std::vector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int8_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int8_t > arg2 ;
  std::vector< int8_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::int8_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int8_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::int8_vector",2,"std::vector< int8_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int8_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("BasicType_int8_vector_set",2,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->int8_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int8_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int8_t > result;
  
  SWIG_check_num_args("Std::BasicType::int8_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int8_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int8_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->int8_vector);
  {
    std::vector< int8_t > * resultptr = new std::vector< int8_t >((const std::vector< int8_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint8_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint8_t > arg2 ;
  std::vector< uint8_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::uint8_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint8_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::uint8_vector",2,"std::vector< uint8_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint8_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("BasicType_uint8_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->uint8_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint8_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint8_t > result;
  
  SWIG_check_num_args("Std::BasicType::uint8_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint8_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint8_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->uint8_vector);
  {
    std::vector< uint8_t > * resultptr = new std::vector< uint8_t >((const std::vector< uint8_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int16_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int16_t > arg2 ;
  std::vector< int16_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::int16_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int16_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::int16_vector",2,"std::vector< int16_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int16_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("BasicType_int16_vector_set",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->int16_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int16_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int16_t > result;
  
  SWIG_check_num_args("Std::BasicType::int16_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int16_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int16_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->int16_vector);
  {
    std::vector< int16_t > * resultptr = new std::vector< int16_t >((const std::vector< int16_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint16_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint16_t > arg2 ;
  std::vector< uint16_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::uint16_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint16_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::uint16_vector",2,"std::vector< uint16_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint16_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("BasicType_uint16_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->uint16_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint16_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint16_t > result;
  
  SWIG_check_num_args("Std::BasicType::uint16_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint16_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint16_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->uint16_vector);
  {
    std::vector< uint16_t > * resultptr = new std::vector< uint16_t >((const std::vector< uint16_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int32_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int32_t > arg2 ;
  std::vector< int32_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::int32_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int32_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::int32_vector",2,"std::vector< int32_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int32_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("BasicType_int32_vector_set",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->int32_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int32_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int32_t > result;
  
  SWIG_check_num_args("Std::BasicType::int32_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int32_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int32_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->int32_vector);
  {
    std::vector< int32_t > * resultptr = new std::vector< int32_t >((const std::vector< int32_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint32_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint32_t > arg2 ;
  std::vector< uint32_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::uint32_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint32_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::uint32_vector",2,"std::vector< uint32_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint32_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("BasicType_uint32_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->uint32_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint32_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint32_t > result;
  
  SWIG_check_num_args("Std::BasicType::uint32_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint32_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint32_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->uint32_vector);
  {
    std::vector< uint32_t > * resultptr = new std::vector< uint32_t >((const std::vector< uint32_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int64_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int64_t > arg2 ;
  std::vector< int64_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::int64_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int64_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::int64_vector",2,"std::vector< int64_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int64_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("BasicType_int64_vector_set",2,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->int64_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int64_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int64_t > result;
  
  SWIG_check_num_args("Std::BasicType::int64_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int64_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int64_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->int64_vector);
  {
    std::vector< int64_t > * resultptr = new std::vector< int64_t >((const std::vector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint64_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint64_t > arg2 ;
  std::vector< uint64_t > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::uint64_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint64_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::uint64_vector",2,"std::vector< uint64_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint64_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_uint64_t_t,0))){
    SWIG_fail_ptr("BasicType_uint64_vector_set",2,SWIGTYPE_p_std__vectorT_uint64_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->uint64_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint64_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint64_t > result;
  
  SWIG_check_num_args("Std::BasicType::uint64_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint64_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint64_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->uint64_vector);
  {
    std::vector< uint64_t > * resultptr = new std::vector< uint64_t >((const std::vector< uint64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_uint64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_float_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::float_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::float_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::float_vector",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_float_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("BasicType_float_vector_set",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->float_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_float_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("Std::BasicType::float_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::float_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_float_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->float_vector);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_double_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::double_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::double_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::double_vector",2,"std::vector< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_double_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("BasicType_double_vector_set",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->double_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_double_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< double > result;
  
  SWIG_check_num_args("Std::BasicType::double_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::double_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_double_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->double_vector);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ldouble_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< long double > arg2 ;
  std::vector< long double > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::ldouble_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ldouble_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::ldouble_vector",2,"std::vector< long double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ldouble_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("BasicType_ldouble_vector_set",2,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->ldouble_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ldouble_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< long double > result;
  
  SWIG_check_num_args("Std::BasicType::ldouble_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ldouble_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ldouble_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->ldouble_vector);
  {
    std::vector< long double > * resultptr = new std::vector< long double >((const std::vector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_string_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  
  SWIG_check_num_args("Std::BasicType::string_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::string_vector",1,"Std::BasicType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BasicType::string_vector",2,"std::vector< std::string >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_string_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("BasicType_string_vector_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->string_vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_string_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< std::string > result;
  
  SWIG_check_num_args("Std::BasicType::string_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::string_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_string_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result =  ((arg1)->string_vector);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_key_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Std::BasicType::key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::key",1,"Std::BasicType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BasicType::key",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_key_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->key = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_key_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::BasicType::key",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::key",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_key_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (int) ((arg1)->key);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicType(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::BasicType",0,0)
  result = (Std::BasicType *)new Std::BasicType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BasicType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicType(void *obj) {
Std::BasicType *arg1 = (Std::BasicType *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicType(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicType);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicType_attributes[] = {
    { "c", _wrap_BasicType_c_get, _wrap_BasicType_c_set },
    { "b", _wrap_BasicType_b_get, _wrap_BasicType_b_set },
    { "d", _wrap_BasicType_d_get, _wrap_BasicType_d_set },
    { "ptr", _wrap_BasicType_ptr_get, _wrap_BasicType_ptr_set },
    { "str", _wrap_BasicType_str_get, _wrap_BasicType_str_set },
    { "char_vector", _wrap_BasicType_char_vector_get, _wrap_BasicType_char_vector_set },
    { "byte_vector", _wrap_BasicType_byte_vector_get, _wrap_BasicType_byte_vector_set },
    { "int8_vector", _wrap_BasicType_int8_vector_get, _wrap_BasicType_int8_vector_set },
    { "uint8_vector", _wrap_BasicType_uint8_vector_get, _wrap_BasicType_uint8_vector_set },
    { "int16_vector", _wrap_BasicType_int16_vector_get, _wrap_BasicType_int16_vector_set },
    { "uint16_vector", _wrap_BasicType_uint16_vector_get, _wrap_BasicType_uint16_vector_set },
    { "int32_vector", _wrap_BasicType_int32_vector_get, _wrap_BasicType_int32_vector_set },
    { "uint32_vector", _wrap_BasicType_uint32_vector_get, _wrap_BasicType_uint32_vector_set },
    { "int64_vector", _wrap_BasicType_int64_vector_get, _wrap_BasicType_int64_vector_set },
    { "uint64_vector", _wrap_BasicType_uint64_vector_get, _wrap_BasicType_uint64_vector_set },
    { "float_vector", _wrap_BasicType_float_vector_get, _wrap_BasicType_float_vector_set },
    { "double_vector", _wrap_BasicType_double_vector_get, _wrap_BasicType_double_vector_set },
    { "ldouble_vector", _wrap_BasicType_ldouble_vector_get, _wrap_BasicType_ldouble_vector_set },
    { "string_vector", _wrap_BasicType_string_vector_get, _wrap_BasicType_string_vector_set },
    { "key", _wrap_BasicType_key_get, _wrap_BasicType_key_set },
    {0,0,0}
};
static swig_lua_method swig_BasicType_methods[]= {
    {0,0}
};
static swig_lua_method swig_BasicType_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BasicType_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicType_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicType_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicType_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicType_Sf_SwigStatic = {
    "BasicType",
    swig_BasicType_Sf_SwigStatic_methods,
    swig_BasicType_Sf_SwigStatic_attributes,
    swig_BasicType_Sf_SwigStatic_constants,
    swig_BasicType_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicType_bases[] = {0,0};
static const char *swig_BasicType_base_names[] = {"Std::StdObject *",0};
static swig_lua_class _wrap_class_BasicType = { "BasicType", "BasicType", &SWIGTYPE_p_Std__BasicType,_proxy__wrap_new_BasicType, swig_delete_BasicType, swig_BasicType_methods, swig_BasicType_attributes, &swig_BasicType_Sf_SwigStatic, swig_BasicType_meta, swig_BasicType_bases, swig_BasicType_base_names };

static int _wrap___lt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = 0 ;
  Std::BasicType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::operator <",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator <",1,"Std::BasicType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator <",2,"Std::BasicType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__lt",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__lt",2,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (bool)Std::operator <((Std::BasicType const &)*arg1,(Std::BasicType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___lt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___lt__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___lt__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__lt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::operator <(Std::StdString const &,Std::StdString const &)\n"
    "    Std::operator <(Std::BasicType const &,Std::BasicType const &)\n");
  lua_error(L);return 0;
}


static int _wrap___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = 0 ;
  Std::BasicType arg2 ;
  Std::BasicType *argp2 ;
  bool result;
  
  SWIG_check_num_args("Std::operator ==",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator ==",1,"Std::BasicType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator ==",2,"Std::BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__eq",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__eq",2,SWIGTYPE_p_Std__BasicType);
  }
  arg2 = *argp2;
  
  result = (bool)Std::operator ==((Std::BasicType const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___eq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::operator ==(Std::StdString const &,Std::StdString const &)\n"
    "    Std::operator ==(Std::BasicType const &,Std::BasicType const)\n");
  lua_error(L);return 0;
}


static int _wrap_StringVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  std::vector< Std::StdString > *arg2 = (std::vector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::vector",1,"Std::StdVector< Std::StdString > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::vector",2,"std::vector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_vector_set",2,SWIGTYPE_p_std__vectorT_Std__StdString_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  std::vector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::vector",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (std::vector< Std::StdString > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Std__StdString_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",0,0)
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< Std::StdString > *arg1 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"std::initializer_list< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_Std__StdString_t,0))){
    SWIG_fail_ptr("new_StringVector",1,SWIGTYPE_p_std__initializer_listT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >((std::initializer_list< Std::StdString > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Std::StdString > *arg1 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"std::vector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("new_StringVector",1,SWIGTYPE_p_std__vectorT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >((std::vector< Std::StdString > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("new_StringVector",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >((Std::StdVector< Std::StdString > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_Std__StdString_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Std__StdString_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< Std::StdString >::StdVector()\n"
    "    Std::StdVector< Std::StdString >::StdVector(size_t)\n"
    "    Std::StdVector< Std::StdString >::StdVector(std::initializer_list< Std::StdString > const &)\n"
    "    Std::StdVector< Std::StdString >::StdVector(std::vector< Std::StdString > const &)\n"
    "    Std::StdVector< Std::StdString >::StdVector(Std::StdVector< Std::StdString > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StringVector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdVector< Std::StdString > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::copy",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::copy",2,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_copy",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_copy",2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->copy((Std::StdVector< Std::StdString > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdVector< Std::StdString > *arg2 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::operator +",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::operator +",2,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector___add",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector___add",2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *) &(arg1)->operator +((Std::StdVector< Std::StdString > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::front",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_front",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdString *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::back",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_back",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdString *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::push_back",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::push_back",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_push_back",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StringVector_push_back",2,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->push_back((Std::StdString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::pop_back",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (arg1)->pop_back();
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::at",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_at",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdString *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::data",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_data",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdString *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::size",1,"Std::StdVector< Std::StdString > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_size",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = ((Std::StdVector< Std::StdString > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::empty",1,"Std::StdVector< Std::StdString > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_empty",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (bool)((Std::StdVector< Std::StdString > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::resize",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_resize",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::clear",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_clear",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_erase",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_erase",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StringVector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StringVector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StringVector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< Std::StdString >::erase(size_t)\n"
    "    Std::StdVector< Std::StdString >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_StringVector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_insert",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StringVector_insert",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->insert(arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString *arg4 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",4,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_insert",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StringVector_insert",4,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->insert(arg2,arg3,(Std::StdString const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StringVector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StringVector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StringVector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< Std::StdString >::insert(size_t,Std::StdString const &)\n"
    "    Std::StdVector< Std::StdString >::insert(size_t,size_t,Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StringVector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::emplace",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::emplace",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::emplace",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_emplace",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StringVector_emplace",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->emplace(arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::fill",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::fill",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_fill",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StringVector_fill",2,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->fill((Std::StdString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::reverse",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_reverse",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::sort",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_sort",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdVector< Std::StdString > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::append",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::append",2,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_append",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_append",2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->append((Std::StdVector< Std::StdString > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::shuffle",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringVector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringVector(void *obj) {
Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringVector_attributes[] = {
    { "vector", _wrap_StringVector_vector_get, _wrap_StringVector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_StringVector_methods[]= {
    { "copy", _wrap_StringVector_copy},
    { "__add", _wrap_StringVector___add},
    { "front", _wrap_StringVector_front},
    { "back", _wrap_StringVector_back},
    { "push_back", _wrap_StringVector_push_back},
    { "pop_back", _wrap_StringVector_pop_back},
    { "at", _wrap_StringVector_at},
    { "data", _wrap_StringVector_data},
    { "size", _wrap_StringVector_size},
    { "empty", _wrap_StringVector_empty},
    { "resize", _wrap_StringVector_resize},
    { "clear", _wrap_StringVector_clear},
    { "erase", _wrap_StringVector_erase},
    { "insert", _wrap_StringVector_insert},
    { "emplace", _wrap_StringVector_emplace},
    { "fill", _wrap_StringVector_fill},
    { "reverse", _wrap_StringVector_reverse},
    { "sort", _wrap_StringVector_sort},
    { "append", _wrap_StringVector_append},
    { "shuffle", _wrap_StringVector_shuffle},
    {0,0}
};
static swig_lua_method swig_StringVector_meta[] = {
    { "__add", _wrap_StringVector___add},
    {0,0}
};

static swig_lua_attribute swig_StringVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringVector_Sf_SwigStatic = {
    "StringVector",
    swig_StringVector_Sf_SwigStatic_methods,
    swig_StringVector_Sf_SwigStatic_attributes,
    swig_StringVector_Sf_SwigStatic_constants,
    swig_StringVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringVector_bases[] = {0};
static const char *swig_StringVector_base_names[] = {0};
static swig_lua_class _wrap_class_StringVector = { "StringVector", "StringVector", &SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,_proxy__wrap_new_StringVector, swig_delete_StringVector, swig_StringVector_methods, swig_StringVector_attributes, &swig_StringVector_Sf_SwigStatic, swig_StringVector_meta, swig_StringVector_bases, swig_StringVector_base_names };

static int _wrap_FloatVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::vector",1,"Std::StdVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< float >::vector",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_vector_set",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("Std::StdVector< float >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::vector",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",0,0)
  result = (Std::StdVector< float > *)new Std::StdVector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< float > *)new Std::StdVector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< float > *arg1 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"std::initializer_list< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_std__initializer_listT_float_t);
  }
  
  result = (Std::StdVector< float > *)new Std::StdVector< float >((std::initializer_list< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (Std::StdVector< float > *)new Std::StdVector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (Std::StdVector< float > *)new Std::StdVector< float >((Std::StdVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< float >::StdVector()\n"
    "    Std::StdVector< float >::StdVector(size_t)\n"
    "    Std::StdVector< float >::StdVector(std::initializer_list< float > const &)\n"
    "    Std::StdVector< float >::StdVector(std::vector< float > const &)\n"
    "    Std::StdVector< float >::StdVector(Std::StdVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  Std::StdVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::copy",1,"Std::StdVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< float >::copy",2,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_copy",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_copy",2,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->copy((Std::StdVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  Std::StdVector< float > *arg2 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::operator +",1,"Std::StdVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< float >::operator +",2,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___add",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___add",2,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (Std::StdVector< float > *) &(arg1)->operator +((Std::StdVector< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::front",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_front",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::back",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_back",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::push_back",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_push_back",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdVector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::pop_back",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::at",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_at",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::data",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_data",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::size",1,"Std::StdVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_size",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = ((Std::StdVector< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::empty",1,"Std::StdVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_empty",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (bool)((Std::StdVector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::resize",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_resize",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::clear",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_clear",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::erase",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_erase",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::erase",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_erase",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatVector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< float >::erase(size_t)\n"
    "    Std::StdVector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("Std::StdVector< float >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::insert",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::insert",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_insert",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = 0 ;
  float temp4 ;
  
  SWIG_check_num_args("Std::StdVector< float >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::insert",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< float >::insert",4,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_insert",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(float)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(float const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatVector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatVector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< float >::insert(size_t,float const &)\n"
    "    Std::StdVector< float >::insert(size_t,size_t,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("Std::StdVector< float >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::emplace",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::emplace",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_emplace",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::fill",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::fill",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_fill",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::reverse",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_reverse",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::sort",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_sort",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  Std::StdVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::append",1,"Std::StdVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< float >::append",2,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_append",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_append",2,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->append((Std::StdVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::shuffle",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatVector(void *obj) {
Std::StdVector< float > *arg1 = (Std::StdVector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatVector_attributes[] = {
    { "vector", _wrap_FloatVector_vector_get, _wrap_FloatVector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_FloatVector_methods[]= {
    { "copy", _wrap_FloatVector_copy},
    { "__add", _wrap_FloatVector___add},
    { "front", _wrap_FloatVector_front},
    { "back", _wrap_FloatVector_back},
    { "push_back", _wrap_FloatVector_push_back},
    { "pop_back", _wrap_FloatVector_pop_back},
    { "at", _wrap_FloatVector_at},
    { "data", _wrap_FloatVector_data},
    { "size", _wrap_FloatVector_size},
    { "empty", _wrap_FloatVector_empty},
    { "resize", _wrap_FloatVector_resize},
    { "clear", _wrap_FloatVector_clear},
    { "erase", _wrap_FloatVector_erase},
    { "insert", _wrap_FloatVector_insert},
    { "emplace", _wrap_FloatVector_emplace},
    { "fill", _wrap_FloatVector_fill},
    { "reverse", _wrap_FloatVector_reverse},
    { "sort", _wrap_FloatVector_sort},
    { "append", _wrap_FloatVector_append},
    { "shuffle", _wrap_FloatVector_shuffle},
    {0,0}
};
static swig_lua_method swig_FloatVector_meta[] = {
    { "__add", _wrap_FloatVector___add},
    {0,0}
};

static swig_lua_attribute swig_FloatVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatVector_Sf_SwigStatic = {
    "FloatVector",
    swig_FloatVector_Sf_SwigStatic_methods,
    swig_FloatVector_Sf_SwigStatic_attributes,
    swig_FloatVector_Sf_SwigStatic_constants,
    swig_FloatVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatVector_bases[] = {0};
static const char *swig_FloatVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatVector = { "FloatVector", "FloatVector", &SWIGTYPE_p_Std__StdVectorT_float_t,_proxy__wrap_new_FloatVector, swig_delete_FloatVector, swig_FloatVector_methods, swig_FloatVector_attributes, &swig_FloatVector_Sf_SwigStatic, swig_FloatVector_meta, swig_FloatVector_bases, swig_FloatVector_base_names };

static int _wrap_DoubleVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::vector",1,"Std::StdVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< double >::vector",2,"std::vector< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_vector_set",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  std::vector< double > result;
  
  SWIG_check_num_args("Std::StdVector< double >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::vector",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",0,0)
  result = (Std::StdVector< double > *)new Std::StdVector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< double > *)new Std::StdVector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< double > *arg1 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"std::initializer_list< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector",1,SWIGTYPE_p_std__initializer_listT_double_t);
  }
  
  result = (Std::StdVector< double > *)new Std::StdVector< double >((std::initializer_list< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (Std::StdVector< double > *)new Std::StdVector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (Std::StdVector< double > *)new Std::StdVector< double >((Std::StdVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< double >::StdVector()\n"
    "    Std::StdVector< double >::StdVector(size_t)\n"
    "    Std::StdVector< double >::StdVector(std::initializer_list< double > const &)\n"
    "    Std::StdVector< double >::StdVector(std::vector< double > const &)\n"
    "    Std::StdVector< double >::StdVector(Std::StdVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  Std::StdVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::copy",1,"Std::StdVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< double >::copy",2,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_copy",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_copy",2,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->copy((Std::StdVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  Std::StdVector< double > *arg2 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::operator +",1,"Std::StdVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< double >::operator +",2,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___add",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___add",2,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (Std::StdVector< double > *) &(arg1)->operator +((Std::StdVector< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::front",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_front",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::back",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_back",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::push_back",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_push_back",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::StdVector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::pop_back",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::at",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_at",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::data",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_data",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::size",1,"Std::StdVector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_size",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = ((Std::StdVector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::empty",1,"Std::StdVector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_empty",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (bool)((Std::StdVector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::resize",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_resize",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::clear",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_clear",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::erase",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_erase",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::erase",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_erase",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< double >::erase(size_t)\n"
    "    Std::StdVector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("Std::StdVector< double >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::insert",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::insert",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_insert",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = 0 ;
  double temp4 ;
  
  SWIG_check_num_args("Std::StdVector< double >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::insert",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< double >::insert",4,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_insert",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(double)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(double const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< double >::insert(size_t,double const &)\n"
    "    Std::StdVector< double >::insert(size_t,size_t,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("Std::StdVector< double >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::emplace",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::emplace",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_emplace",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::fill",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::fill",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_fill",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::reverse",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_reverse",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::sort",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_sort",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  Std::StdVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::append",1,"Std::StdVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< double >::append",2,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_append",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_append",2,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->append((Std::StdVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::shuffle",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleVector(void *obj) {
Std::StdVector< double > *arg1 = (Std::StdVector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleVector_attributes[] = {
    { "vector", _wrap_DoubleVector_vector_get, _wrap_DoubleVector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleVector_methods[]= {
    { "copy", _wrap_DoubleVector_copy},
    { "__add", _wrap_DoubleVector___add},
    { "front", _wrap_DoubleVector_front},
    { "back", _wrap_DoubleVector_back},
    { "push_back", _wrap_DoubleVector_push_back},
    { "pop_back", _wrap_DoubleVector_pop_back},
    { "at", _wrap_DoubleVector_at},
    { "data", _wrap_DoubleVector_data},
    { "size", _wrap_DoubleVector_size},
    { "empty", _wrap_DoubleVector_empty},
    { "resize", _wrap_DoubleVector_resize},
    { "clear", _wrap_DoubleVector_clear},
    { "erase", _wrap_DoubleVector_erase},
    { "insert", _wrap_DoubleVector_insert},
    { "emplace", _wrap_DoubleVector_emplace},
    { "fill", _wrap_DoubleVector_fill},
    { "reverse", _wrap_DoubleVector_reverse},
    { "sort", _wrap_DoubleVector_sort},
    { "append", _wrap_DoubleVector_append},
    { "shuffle", _wrap_DoubleVector_shuffle},
    {0,0}
};
static swig_lua_method swig_DoubleVector_meta[] = {
    { "__add", _wrap_DoubleVector___add},
    {0,0}
};

static swig_lua_attribute swig_DoubleVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleVector_Sf_SwigStatic = {
    "DoubleVector",
    swig_DoubleVector_Sf_SwigStatic_methods,
    swig_DoubleVector_Sf_SwigStatic_attributes,
    swig_DoubleVector_Sf_SwigStatic_constants,
    swig_DoubleVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleVector_bases[] = {0};
static const char *swig_DoubleVector_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleVector = { "DoubleVector", "DoubleVector", &SWIGTYPE_p_Std__StdVectorT_double_t,_proxy__wrap_new_DoubleVector, swig_delete_DoubleVector, swig_DoubleVector_methods, swig_DoubleVector_attributes, &swig_DoubleVector_Sf_SwigStatic, swig_DoubleVector_meta, swig_DoubleVector_bases, swig_DoubleVector_base_names };

static int _wrap_Int8Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  std::vector< signed char > arg2 ;
  std::vector< signed char > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::vector",1,"Std::StdVector< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::vector",2,"std::vector< signed char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_vector_set",2,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  std::vector< signed char > result;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::vector",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< signed char > * resultptr = new std::vector< signed char >((const std::vector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::StdVector",0,0)
  result = (Std::StdVector< int8_t > *)new Std::StdVector< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< int8_t > *)new Std::StdVector< int8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< signed char > *arg1 = 0 ;
  Std::StdVector< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::StdVector",1,"std::initializer_list< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Vector",1,SWIGTYPE_p_std__initializer_listT_signed_char_t);
  }
  
  result = (Std::StdVector< int8_t > *)new Std::StdVector< int8_t >((std::initializer_list< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = 0 ;
  Std::StdVector< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::StdVector",1,"std::vector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Vector",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (Std::StdVector< int8_t > *)new Std::StdVector< int8_t >((std::vector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = 0 ;
  Std::StdVector< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::StdVector",1,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Vector",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (Std::StdVector< int8_t > *)new Std::StdVector< int8_t >((Std::StdVector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int8_t >::StdVector()\n"
    "    Std::StdVector< int8_t >::StdVector(size_t)\n"
    "    Std::StdVector< int8_t >::StdVector(std::initializer_list< signed char > const &)\n"
    "    Std::StdVector< int8_t >::StdVector(std::vector< signed char > const &)\n"
    "    Std::StdVector< int8_t >::StdVector(Std::StdVector< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  Std::StdVector< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::copy",1,"Std::StdVector< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::copy",2,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->copy((Std::StdVector< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  Std::StdVector< signed char > *arg2 = 0 ;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::operator +",1,"Std::StdVector< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::operator +",2,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___add",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___add",2,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (Std::StdVector< signed char > *) &(arg1)->operator +((Std::StdVector< signed char > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::front",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_front",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::back",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_back",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::push_back",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::push_back",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::pop_back",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t arg2 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::at",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_at",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::data",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_data",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::size",1,"Std::StdVector< int8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_size",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = ((Std::StdVector< int8_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::empty",1,"Std::StdVector< int8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (bool)((Std::StdVector< int8_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::resize",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::clear",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::erase",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::erase",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int8_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int8Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int8_t >::erase(size_t)\n"
    "    Std::StdVector< int8_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::insert",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int8_t >::insert",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(signed char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char *arg4 = 0 ;
  signed char temp4 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::insert",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int8_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< int8_t >::insert",4,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(signed char)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(signed char const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int8Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int8Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int8_t >::insert(size_t,signed char const &)\n"
    "    Std::StdVector< int8_t >::insert(size_t,size_t,signed char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::emplace",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int8_t >::emplace",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(signed char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::fill",1,"Std::StdVector< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::fill",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::reverse",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::sort",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  Std::StdVector< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::append",1,"Std::StdVector< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int8_t >::append",2,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_append",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_append",2,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->append((Std::StdVector< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int8_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int8_t >::shuffle",1,"Std::StdVector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Vector(void *obj) {
Std::StdVector< int8_t > *arg1 = (Std::StdVector< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Vector_attributes[] = {
    { "vector", _wrap_Int8Vector_vector_get, _wrap_Int8Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Vector_methods[]= {
    { "copy", _wrap_Int8Vector_copy},
    { "__add", _wrap_Int8Vector___add},
    { "front", _wrap_Int8Vector_front},
    { "back", _wrap_Int8Vector_back},
    { "push_back", _wrap_Int8Vector_push_back},
    { "pop_back", _wrap_Int8Vector_pop_back},
    { "at", _wrap_Int8Vector_at},
    { "data", _wrap_Int8Vector_data},
    { "size", _wrap_Int8Vector_size},
    { "empty", _wrap_Int8Vector_empty},
    { "resize", _wrap_Int8Vector_resize},
    { "clear", _wrap_Int8Vector_clear},
    { "erase", _wrap_Int8Vector_erase},
    { "insert", _wrap_Int8Vector_insert},
    { "emplace", _wrap_Int8Vector_emplace},
    { "fill", _wrap_Int8Vector_fill},
    { "reverse", _wrap_Int8Vector_reverse},
    { "sort", _wrap_Int8Vector_sort},
    { "append", _wrap_Int8Vector_append},
    { "shuffle", _wrap_Int8Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_Int8Vector_meta[] = {
    { "__add", _wrap_Int8Vector___add},
    {0,0}
};

static swig_lua_attribute swig_Int8Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Vector_Sf_SwigStatic = {
    "Int8Vector",
    swig_Int8Vector_Sf_SwigStatic_methods,
    swig_Int8Vector_Sf_SwigStatic_attributes,
    swig_Int8Vector_Sf_SwigStatic_constants,
    swig_Int8Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Vector_bases[] = {0};
static const char *swig_Int8Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Vector = { "Int8Vector", "Int8Vector", &SWIGTYPE_p_Std__StdVectorT_signed_char_t,_proxy__wrap_new_Int8Vector, swig_delete_Int8Vector, swig_Int8Vector_methods, swig_Int8Vector_attributes, &swig_Int8Vector_Sf_SwigStatic, swig_Int8Vector_meta, swig_Int8Vector_bases, swig_Int8Vector_base_names };

static int _wrap_UInt8Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::vector",1,"Std::StdVector< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::vector",2,"std::vector< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  std::vector< unsigned char > result;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::vector",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< unsigned char > * resultptr = new std::vector< unsigned char >((const std::vector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::StdVector",0,0)
  result = (Std::StdVector< uint8_t > *)new Std::StdVector< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< uint8_t > *)new Std::StdVector< uint8_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned char > *arg1 = 0 ;
  Std::StdVector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::StdVector",1,"std::initializer_list< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_char_t);
  }
  
  result = (Std::StdVector< uint8_t > *)new Std::StdVector< uint8_t >((std::initializer_list< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = 0 ;
  Std::StdVector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::StdVector",1,"std::vector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Vector",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (Std::StdVector< uint8_t > *)new Std::StdVector< uint8_t >((std::vector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = 0 ;
  Std::StdVector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::StdVector",1,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (Std::StdVector< uint8_t > *)new Std::StdVector< uint8_t >((Std::StdVector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint8_t >::StdVector()\n"
    "    Std::StdVector< uint8_t >::StdVector(size_t)\n"
    "    Std::StdVector< uint8_t >::StdVector(std::initializer_list< unsigned char > const &)\n"
    "    Std::StdVector< uint8_t >::StdVector(std::vector< unsigned char > const &)\n"
    "    Std::StdVector< uint8_t >::StdVector(Std::StdVector< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  Std::StdVector< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::copy",1,"Std::StdVector< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::copy",2,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  Std::StdVector< unsigned char > *arg2 = 0 ;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::operator +",1,"Std::StdVector< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::operator +",2,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (Std::StdVector< unsigned char > *) &(arg1)->operator +((Std::StdVector< unsigned char > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::front",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::back",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::push_back",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::push_back",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::pop_back",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::at",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::data",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::size",1,"Std::StdVector< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = ((Std::StdVector< uint8_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::empty",1,"Std::StdVector< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (bool)((Std::StdVector< uint8_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::resize",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::clear",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::erase",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::erase",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint8_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt8Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint8_t >::erase(size_t)\n"
    "    Std::StdVector< uint8_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::insert",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint8_t >::insert",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char *arg4 = 0 ;
  unsigned char temp4 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::insert",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint8_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< uint8_t >::insert",4,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(unsigned char)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned char const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt8Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt8Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint8_t >::insert(size_t,unsigned char const &)\n"
    "    Std::StdVector< uint8_t >::insert(size_t,size_t,unsigned char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::emplace",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint8_t >::emplace",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::fill",1,"Std::StdVector< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::fill",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::reverse",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::sort",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  Std::StdVector< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::append",1,"Std::StdVector< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint8_t >::append",2,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_append",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_append",2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->append((Std::StdVector< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint8_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint8_t >::shuffle",1,"Std::StdVector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8Vector(void *obj) {
Std::StdVector< uint8_t > *arg1 = (Std::StdVector< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Vector_attributes[] = {
    { "vector", _wrap_UInt8Vector_vector_get, _wrap_UInt8Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Vector_methods[]= {
    { "copy", _wrap_UInt8Vector_copy},
    { "__add", _wrap_UInt8Vector___add},
    { "front", _wrap_UInt8Vector_front},
    { "back", _wrap_UInt8Vector_back},
    { "push_back", _wrap_UInt8Vector_push_back},
    { "pop_back", _wrap_UInt8Vector_pop_back},
    { "at", _wrap_UInt8Vector_at},
    { "data", _wrap_UInt8Vector_data},
    { "size", _wrap_UInt8Vector_size},
    { "empty", _wrap_UInt8Vector_empty},
    { "resize", _wrap_UInt8Vector_resize},
    { "clear", _wrap_UInt8Vector_clear},
    { "erase", _wrap_UInt8Vector_erase},
    { "insert", _wrap_UInt8Vector_insert},
    { "emplace", _wrap_UInt8Vector_emplace},
    { "fill", _wrap_UInt8Vector_fill},
    { "reverse", _wrap_UInt8Vector_reverse},
    { "sort", _wrap_UInt8Vector_sort},
    { "append", _wrap_UInt8Vector_append},
    { "shuffle", _wrap_UInt8Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_UInt8Vector_meta[] = {
    { "__add", _wrap_UInt8Vector___add},
    {0,0}
};

static swig_lua_attribute swig_UInt8Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Vector_Sf_SwigStatic = {
    "UInt8Vector",
    swig_UInt8Vector_Sf_SwigStatic_methods,
    swig_UInt8Vector_Sf_SwigStatic_attributes,
    swig_UInt8Vector_Sf_SwigStatic_constants,
    swig_UInt8Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Vector_bases[] = {0};
static const char *swig_UInt8Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8Vector = { "UInt8Vector", "UInt8Vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,_proxy__wrap_new_UInt8Vector, swig_delete_UInt8Vector, swig_UInt8Vector_methods, swig_UInt8Vector_attributes, &swig_UInt8Vector_Sf_SwigStatic, swig_UInt8Vector_meta, swig_UInt8Vector_bases, swig_UInt8Vector_base_names };

static int _wrap_Int16Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  std::vector< short > arg2 ;
  std::vector< short > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::vector",1,"Std::StdVector< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::vector",2,"std::vector< short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_vector_set",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  std::vector< short > result;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::vector",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< short > * resultptr = new std::vector< short >((const std::vector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::StdVector",0,0)
  result = (Std::StdVector< int16_t > *)new Std::StdVector< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< int16_t > *)new Std::StdVector< int16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< short > *arg1 = 0 ;
  Std::StdVector< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::StdVector",1,"std::initializer_list< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_short_t,0))){
    SWIG_fail_ptr("new_Int16Vector",1,SWIGTYPE_p_std__initializer_listT_short_t);
  }
  
  result = (Std::StdVector< int16_t > *)new Std::StdVector< int16_t >((std::initializer_list< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = 0 ;
  Std::StdVector< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::StdVector",1,"std::vector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_Int16Vector",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (Std::StdVector< int16_t > *)new Std::StdVector< int16_t >((std::vector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = 0 ;
  Std::StdVector< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::StdVector",1,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("new_Int16Vector",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (Std::StdVector< int16_t > *)new Std::StdVector< int16_t >((Std::StdVector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int16_t >::StdVector()\n"
    "    Std::StdVector< int16_t >::StdVector(size_t)\n"
    "    Std::StdVector< int16_t >::StdVector(std::initializer_list< short > const &)\n"
    "    Std::StdVector< int16_t >::StdVector(std::vector< short > const &)\n"
    "    Std::StdVector< int16_t >::StdVector(Std::StdVector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  Std::StdVector< short > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::copy",1,"Std::StdVector< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::copy",2,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->copy((Std::StdVector< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  Std::StdVector< short > *arg2 = 0 ;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::operator +",1,"Std::StdVector< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::operator +",2,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___add",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___add",2,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (Std::StdVector< short > *) &(arg1)->operator +((Std::StdVector< short > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::front",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_front",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::back",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_back",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::push_back",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::push_back",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::pop_back",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::at",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_at",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::data",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_data",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::size",1,"Std::StdVector< int16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_size",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = ((Std::StdVector< int16_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::empty",1,"Std::StdVector< int16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (bool)((Std::StdVector< int16_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::resize",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::clear",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::erase",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::erase",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int16_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int16Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int16_t >::erase(size_t)\n"
    "    Std::StdVector< int16_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::insert",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int16_t >::insert",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short *arg4 = 0 ;
  short temp4 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::insert",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int16_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< int16_t >::insert",4,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(short)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(short const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int16Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int16Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int16_t >::insert(size_t,short const &)\n"
    "    Std::StdVector< int16_t >::insert(size_t,size_t,short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::emplace",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int16_t >::emplace",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::fill",1,"Std::StdVector< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::fill",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::reverse",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::sort",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  Std::StdVector< short > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::append",1,"Std::StdVector< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int16_t >::append",2,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_append",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_append",2,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->append((Std::StdVector< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int16_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int16_t >::shuffle",1,"Std::StdVector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Vector(void *obj) {
Std::StdVector< int16_t > *arg1 = (Std::StdVector< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Vector_attributes[] = {
    { "vector", _wrap_Int16Vector_vector_get, _wrap_Int16Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Vector_methods[]= {
    { "copy", _wrap_Int16Vector_copy},
    { "__add", _wrap_Int16Vector___add},
    { "front", _wrap_Int16Vector_front},
    { "back", _wrap_Int16Vector_back},
    { "push_back", _wrap_Int16Vector_push_back},
    { "pop_back", _wrap_Int16Vector_pop_back},
    { "at", _wrap_Int16Vector_at},
    { "data", _wrap_Int16Vector_data},
    { "size", _wrap_Int16Vector_size},
    { "empty", _wrap_Int16Vector_empty},
    { "resize", _wrap_Int16Vector_resize},
    { "clear", _wrap_Int16Vector_clear},
    { "erase", _wrap_Int16Vector_erase},
    { "insert", _wrap_Int16Vector_insert},
    { "emplace", _wrap_Int16Vector_emplace},
    { "fill", _wrap_Int16Vector_fill},
    { "reverse", _wrap_Int16Vector_reverse},
    { "sort", _wrap_Int16Vector_sort},
    { "append", _wrap_Int16Vector_append},
    { "shuffle", _wrap_Int16Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_Int16Vector_meta[] = {
    { "__add", _wrap_Int16Vector___add},
    {0,0}
};

static swig_lua_attribute swig_Int16Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Vector_Sf_SwigStatic = {
    "Int16Vector",
    swig_Int16Vector_Sf_SwigStatic_methods,
    swig_Int16Vector_Sf_SwigStatic_attributes,
    swig_Int16Vector_Sf_SwigStatic_constants,
    swig_Int16Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Vector_bases[] = {0};
static const char *swig_Int16Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Vector = { "Int16Vector", "Int16Vector", &SWIGTYPE_p_Std__StdVectorT_short_t,_proxy__wrap_new_Int16Vector, swig_delete_Int16Vector, swig_Int16Vector_methods, swig_Int16Vector_attributes, &swig_Int16Vector_Sf_SwigStatic, swig_Int16Vector_meta, swig_Int16Vector_bases, swig_Int16Vector_base_names };

static int _wrap_UInt16Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  std::vector< unsigned short > arg2 ;
  std::vector< unsigned short > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::vector",1,"Std::StdVector< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::vector",2,"std::vector< unsigned short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  std::vector< unsigned short > result;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::vector",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< unsigned short > * resultptr = new std::vector< unsigned short >((const std::vector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::StdVector",0,0)
  result = (Std::StdVector< uint16_t > *)new Std::StdVector< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< uint16_t > *)new Std::StdVector< uint16_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned short > *arg1 = 0 ;
  Std::StdVector< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::StdVector",1,"std::initializer_list< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_short_t);
  }
  
  result = (Std::StdVector< uint16_t > *)new Std::StdVector< uint16_t >((std::initializer_list< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = 0 ;
  Std::StdVector< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::StdVector",1,"std::vector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Vector",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (Std::StdVector< uint16_t > *)new Std::StdVector< uint16_t >((std::vector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = 0 ;
  Std::StdVector< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::StdVector",1,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (Std::StdVector< uint16_t > *)new Std::StdVector< uint16_t >((Std::StdVector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint16_t >::StdVector()\n"
    "    Std::StdVector< uint16_t >::StdVector(size_t)\n"
    "    Std::StdVector< uint16_t >::StdVector(std::initializer_list< unsigned short > const &)\n"
    "    Std::StdVector< uint16_t >::StdVector(std::vector< unsigned short > const &)\n"
    "    Std::StdVector< uint16_t >::StdVector(Std::StdVector< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  Std::StdVector< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::copy",1,"Std::StdVector< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::copy",2,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  Std::StdVector< unsigned short > *arg2 = 0 ;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::operator +",1,"Std::StdVector< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::operator +",2,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (Std::StdVector< unsigned short > *) &(arg1)->operator +((Std::StdVector< unsigned short > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::front",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::back",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::push_back",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::push_back",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::pop_back",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::at",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::data",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::size",1,"Std::StdVector< uint16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = ((Std::StdVector< uint16_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::empty",1,"Std::StdVector< uint16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (bool)((Std::StdVector< uint16_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::resize",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::clear",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::erase",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::erase",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint16_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt16Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint16_t >::erase(size_t)\n"
    "    Std::StdVector< uint16_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::insert",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint16_t >::insert",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short *arg4 = 0 ;
  unsigned short temp4 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::insert",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint16_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< uint16_t >::insert",4,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(unsigned short)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned short const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt16Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt16Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint16_t >::insert(size_t,unsigned short const &)\n"
    "    Std::StdVector< uint16_t >::insert(size_t,size_t,unsigned short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::emplace",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint16_t >::emplace",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::fill",1,"Std::StdVector< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::fill",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::reverse",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::sort",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  Std::StdVector< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::append",1,"Std::StdVector< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint16_t >::append",2,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_append",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_append",2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->append((Std::StdVector< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint16_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint16_t >::shuffle",1,"Std::StdVector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Vector(void *obj) {
Std::StdVector< uint16_t > *arg1 = (Std::StdVector< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Vector_attributes[] = {
    { "vector", _wrap_UInt16Vector_vector_get, _wrap_UInt16Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Vector_methods[]= {
    { "copy", _wrap_UInt16Vector_copy},
    { "__add", _wrap_UInt16Vector___add},
    { "front", _wrap_UInt16Vector_front},
    { "back", _wrap_UInt16Vector_back},
    { "push_back", _wrap_UInt16Vector_push_back},
    { "pop_back", _wrap_UInt16Vector_pop_back},
    { "at", _wrap_UInt16Vector_at},
    { "data", _wrap_UInt16Vector_data},
    { "size", _wrap_UInt16Vector_size},
    { "empty", _wrap_UInt16Vector_empty},
    { "resize", _wrap_UInt16Vector_resize},
    { "clear", _wrap_UInt16Vector_clear},
    { "erase", _wrap_UInt16Vector_erase},
    { "insert", _wrap_UInt16Vector_insert},
    { "emplace", _wrap_UInt16Vector_emplace},
    { "fill", _wrap_UInt16Vector_fill},
    { "reverse", _wrap_UInt16Vector_reverse},
    { "sort", _wrap_UInt16Vector_sort},
    { "append", _wrap_UInt16Vector_append},
    { "shuffle", _wrap_UInt16Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_UInt16Vector_meta[] = {
    { "__add", _wrap_UInt16Vector___add},
    {0,0}
};

static swig_lua_attribute swig_UInt16Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Vector_Sf_SwigStatic = {
    "UInt16Vector",
    swig_UInt16Vector_Sf_SwigStatic_methods,
    swig_UInt16Vector_Sf_SwigStatic_attributes,
    swig_UInt16Vector_Sf_SwigStatic_constants,
    swig_UInt16Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Vector_bases[] = {0};
static const char *swig_UInt16Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Vector = { "UInt16Vector", "UInt16Vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,_proxy__wrap_new_UInt16Vector, swig_delete_UInt16Vector, swig_UInt16Vector_methods, swig_UInt16Vector_attributes, &swig_UInt16Vector_Sf_SwigStatic, swig_UInt16Vector_meta, swig_UInt16Vector_bases, swig_UInt16Vector_base_names };

static int _wrap_Int32Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  std::vector< int > arg2 ;
  std::vector< int > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::vector",1,"Std::StdVector< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::vector",2,"std::vector< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_vector_set",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  std::vector< int > result;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::vector",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< int > * resultptr = new std::vector< int >((const std::vector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::StdVector",0,0)
  result = (Std::StdVector< int32_t > *)new Std::StdVector< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< int32_t > *)new Std::StdVector< int32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< int > *arg1 = 0 ;
  Std::StdVector< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::StdVector",1,"std::initializer_list< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_int_t,0))){
    SWIG_fail_ptr("new_Int32Vector",1,SWIGTYPE_p_std__initializer_listT_int_t);
  }
  
  result = (Std::StdVector< int32_t > *)new Std::StdVector< int32_t >((std::initializer_list< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  Std::StdVector< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::StdVector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_Int32Vector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (Std::StdVector< int32_t > *)new Std::StdVector< int32_t >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = 0 ;
  Std::StdVector< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::StdVector",1,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("new_Int32Vector",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (Std::StdVector< int32_t > *)new Std::StdVector< int32_t >((Std::StdVector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int32_t >::StdVector()\n"
    "    Std::StdVector< int32_t >::StdVector(size_t)\n"
    "    Std::StdVector< int32_t >::StdVector(std::initializer_list< int > const &)\n"
    "    Std::StdVector< int32_t >::StdVector(std::vector< int > const &)\n"
    "    Std::StdVector< int32_t >::StdVector(Std::StdVector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  Std::StdVector< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::copy",1,"Std::StdVector< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::copy",2,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->copy((Std::StdVector< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  Std::StdVector< int > *arg2 = 0 ;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::operator +",1,"Std::StdVector< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::operator +",2,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___add",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___add",2,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (Std::StdVector< int > *) &(arg1)->operator +((Std::StdVector< int > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::front",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_front",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::back",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_back",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::push_back",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::push_back",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::pop_back",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::at",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_at",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::data",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_data",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::size",1,"Std::StdVector< int32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_size",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = ((Std::StdVector< int32_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::empty",1,"Std::StdVector< int32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (bool)((Std::StdVector< int32_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::resize",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::clear",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::erase",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::erase",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int32_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int32Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int32_t >::erase(size_t)\n"
    "    Std::StdVector< int32_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::insert",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int32_t >::insert",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *arg4 = 0 ;
  int temp4 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::insert",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int32_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< int32_t >::insert",4,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(int)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(int const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int32Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int32Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int32_t >::insert(size_t,int const &)\n"
    "    Std::StdVector< int32_t >::insert(size_t,size_t,int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::emplace",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int32_t >::emplace",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::fill",1,"Std::StdVector< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::fill",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::reverse",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::sort",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  Std::StdVector< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::append",1,"Std::StdVector< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int32_t >::append",2,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_append",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_append",2,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->append((Std::StdVector< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int32_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int32_t >::shuffle",1,"Std::StdVector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Vector(void *obj) {
Std::StdVector< int32_t > *arg1 = (Std::StdVector< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Vector_attributes[] = {
    { "vector", _wrap_Int32Vector_vector_get, _wrap_Int32Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Vector_methods[]= {
    { "copy", _wrap_Int32Vector_copy},
    { "__add", _wrap_Int32Vector___add},
    { "front", _wrap_Int32Vector_front},
    { "back", _wrap_Int32Vector_back},
    { "push_back", _wrap_Int32Vector_push_back},
    { "pop_back", _wrap_Int32Vector_pop_back},
    { "at", _wrap_Int32Vector_at},
    { "data", _wrap_Int32Vector_data},
    { "size", _wrap_Int32Vector_size},
    { "empty", _wrap_Int32Vector_empty},
    { "resize", _wrap_Int32Vector_resize},
    { "clear", _wrap_Int32Vector_clear},
    { "erase", _wrap_Int32Vector_erase},
    { "insert", _wrap_Int32Vector_insert},
    { "emplace", _wrap_Int32Vector_emplace},
    { "fill", _wrap_Int32Vector_fill},
    { "reverse", _wrap_Int32Vector_reverse},
    { "sort", _wrap_Int32Vector_sort},
    { "append", _wrap_Int32Vector_append},
    { "shuffle", _wrap_Int32Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_Int32Vector_meta[] = {
    { "__add", _wrap_Int32Vector___add},
    {0,0}
};

static swig_lua_attribute swig_Int32Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Vector_Sf_SwigStatic = {
    "Int32Vector",
    swig_Int32Vector_Sf_SwigStatic_methods,
    swig_Int32Vector_Sf_SwigStatic_attributes,
    swig_Int32Vector_Sf_SwigStatic_constants,
    swig_Int32Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Vector_bases[] = {0};
static const char *swig_Int32Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Vector = { "Int32Vector", "Int32Vector", &SWIGTYPE_p_Std__StdVectorT_int_t,_proxy__wrap_new_Int32Vector, swig_delete_Int32Vector, swig_Int32Vector_methods, swig_Int32Vector_attributes, &swig_Int32Vector_Sf_SwigStatic, swig_Int32Vector_meta, swig_Int32Vector_bases, swig_Int32Vector_base_names };

static int _wrap_UInt32Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  std::vector< unsigned int > arg2 ;
  std::vector< unsigned int > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::vector",1,"Std::StdVector< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::vector",2,"std::vector< unsigned int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  std::vector< unsigned int > result;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::vector",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< unsigned int > * resultptr = new std::vector< unsigned int >((const std::vector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::StdVector",0,0)
  result = (Std::StdVector< uint32_t > *)new Std::StdVector< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< uint32_t > *)new Std::StdVector< uint32_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned int > *arg1 = 0 ;
  Std::StdVector< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::StdVector",1,"std::initializer_list< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_int_t);
  }
  
  result = (Std::StdVector< uint32_t > *)new Std::StdVector< uint32_t >((std::initializer_list< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  Std::StdVector< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::StdVector",1,"std::vector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vector",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (Std::StdVector< uint32_t > *)new Std::StdVector< uint32_t >((std::vector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = 0 ;
  Std::StdVector< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::StdVector",1,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (Std::StdVector< uint32_t > *)new Std::StdVector< uint32_t >((Std::StdVector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint32_t >::StdVector()\n"
    "    Std::StdVector< uint32_t >::StdVector(size_t)\n"
    "    Std::StdVector< uint32_t >::StdVector(std::initializer_list< unsigned int > const &)\n"
    "    Std::StdVector< uint32_t >::StdVector(std::vector< unsigned int > const &)\n"
    "    Std::StdVector< uint32_t >::StdVector(Std::StdVector< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  Std::StdVector< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::copy",1,"Std::StdVector< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::copy",2,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  Std::StdVector< unsigned int > *arg2 = 0 ;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::operator +",1,"Std::StdVector< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::operator +",2,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (Std::StdVector< unsigned int > *) &(arg1)->operator +((Std::StdVector< unsigned int > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::front",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::back",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::push_back",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::push_back",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::pop_back",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::at",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::data",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::size",1,"Std::StdVector< uint32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = ((Std::StdVector< uint32_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::empty",1,"Std::StdVector< uint32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (bool)((Std::StdVector< uint32_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::resize",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::clear",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::erase",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::erase",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint32_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt32Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint32_t >::erase(size_t)\n"
    "    Std::StdVector< uint32_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::insert",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint32_t >::insert",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *arg4 = 0 ;
  unsigned int temp4 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::insert",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint32_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< uint32_t >::insert",4,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(unsigned int)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned int const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt32Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt32Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< uint32_t >::insert(size_t,unsigned int const &)\n"
    "    Std::StdVector< uint32_t >::insert(size_t,size_t,unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::emplace",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< uint32_t >::emplace",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::fill",1,"Std::StdVector< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::fill",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::reverse",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::sort",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  Std::StdVector< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::append",1,"Std::StdVector< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< uint32_t >::append",2,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_append",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_append",2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->append((Std::StdVector< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< uint32_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< uint32_t >::shuffle",1,"Std::StdVector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Vector(void *obj) {
Std::StdVector< uint32_t > *arg1 = (Std::StdVector< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Vector_attributes[] = {
    { "vector", _wrap_UInt32Vector_vector_get, _wrap_UInt32Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Vector_methods[]= {
    { "copy", _wrap_UInt32Vector_copy},
    { "__add", _wrap_UInt32Vector___add},
    { "front", _wrap_UInt32Vector_front},
    { "back", _wrap_UInt32Vector_back},
    { "push_back", _wrap_UInt32Vector_push_back},
    { "pop_back", _wrap_UInt32Vector_pop_back},
    { "at", _wrap_UInt32Vector_at},
    { "data", _wrap_UInt32Vector_data},
    { "size", _wrap_UInt32Vector_size},
    { "empty", _wrap_UInt32Vector_empty},
    { "resize", _wrap_UInt32Vector_resize},
    { "clear", _wrap_UInt32Vector_clear},
    { "erase", _wrap_UInt32Vector_erase},
    { "insert", _wrap_UInt32Vector_insert},
    { "emplace", _wrap_UInt32Vector_emplace},
    { "fill", _wrap_UInt32Vector_fill},
    { "reverse", _wrap_UInt32Vector_reverse},
    { "sort", _wrap_UInt32Vector_sort},
    { "append", _wrap_UInt32Vector_append},
    { "shuffle", _wrap_UInt32Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_UInt32Vector_meta[] = {
    { "__add", _wrap_UInt32Vector___add},
    {0,0}
};

static swig_lua_attribute swig_UInt32Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Vector_Sf_SwigStatic = {
    "UInt32Vector",
    swig_UInt32Vector_Sf_SwigStatic_methods,
    swig_UInt32Vector_Sf_SwigStatic_attributes,
    swig_UInt32Vector_Sf_SwigStatic_constants,
    swig_UInt32Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Vector_bases[] = {0};
static const char *swig_UInt32Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Vector = { "UInt32Vector", "UInt32Vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,_proxy__wrap_new_UInt32Vector, swig_delete_UInt32Vector, swig_UInt32Vector_methods, swig_UInt32Vector_attributes, &swig_UInt32Vector_Sf_SwigStatic, swig_UInt32Vector_meta, swig_UInt32Vector_bases, swig_UInt32Vector_base_names };

static int _wrap_Int64Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  std::vector< long long > arg2 ;
  std::vector< long long > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::vector",1,"Std::StdVector< i64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::vector",2,"std::vector< long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_vector_set",2,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  std::vector< long long > result;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::vector",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< long long > * resultptr = new std::vector< long long >((const std::vector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::StdVector",0,0)
  result = (Std::StdVector< i64_t > *)new Std::StdVector< i64_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< i64_t > *)new Std::StdVector< i64_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< long long > *arg1 = 0 ;
  Std::StdVector< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::StdVector",1,"std::initializer_list< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_long_long_t,0))){
    SWIG_fail_ptr("new_Int64Vector",1,SWIGTYPE_p_std__initializer_listT_long_long_t);
  }
  
  result = (Std::StdVector< i64_t > *)new Std::StdVector< i64_t >((std::initializer_list< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = 0 ;
  Std::StdVector< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::StdVector",1,"std::vector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("new_Int64Vector",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (Std::StdVector< i64_t > *)new Std::StdVector< i64_t >((std::vector< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = 0 ;
  Std::StdVector< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::StdVector",1,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("new_Int64Vector",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (Std::StdVector< i64_t > *)new Std::StdVector< i64_t >((Std::StdVector< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< i64_t >::StdVector()\n"
    "    Std::StdVector< i64_t >::StdVector(size_t)\n"
    "    Std::StdVector< i64_t >::StdVector(std::initializer_list< long long > const &)\n"
    "    Std::StdVector< i64_t >::StdVector(std::vector< long long > const &)\n"
    "    Std::StdVector< i64_t >::StdVector(Std::StdVector< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  Std::StdVector< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::copy",1,"Std::StdVector< i64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::copy",2,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->copy((Std::StdVector< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  Std::StdVector< long long > *arg2 = 0 ;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::operator +",1,"Std::StdVector< i64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::operator +",2,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector___add",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector___add",2,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (Std::StdVector< long long > *) &(arg1)->operator +((Std::StdVector< long long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::front",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_front",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::back",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_back",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::push_back",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::push_back",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  long long result;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::pop_back",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t arg2 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::at",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_at",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::data",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_data",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::size",1,"Std::StdVector< i64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_size",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = ((Std::StdVector< i64_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::empty",1,"Std::StdVector< i64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (bool)((Std::StdVector< i64_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::resize",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::clear",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::erase",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::erase",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< i64_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int64Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int64Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< i64_t >::erase(size_t)\n"
    "    Std::StdVector< i64_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::insert",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< i64_t >::insert",3,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *arg4 = 0 ;
  long long temp4 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::insert",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< i64_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< i64_t >::insert",4,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(long long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(long long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int64Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Int64Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< i64_t >::insert(size_t,long long const &)\n"
    "    Std::StdVector< i64_t >::insert(size_t,size_t,long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  size_t arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::emplace",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< i64_t >::emplace",3,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::fill",1,"Std::StdVector< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::fill",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::reverse",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::sort",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  Std::StdVector< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::append",1,"Std::StdVector< i64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< i64_t >::append",2,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_append",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_append",2,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->append((Std::StdVector< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< i64_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< i64_t >::shuffle",1,"Std::StdVector< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Vector(void *obj) {
Std::StdVector< i64_t > *arg1 = (Std::StdVector< i64_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Vector_attributes[] = {
    { "vector", _wrap_Int64Vector_vector_get, _wrap_Int64Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Vector_methods[]= {
    { "copy", _wrap_Int64Vector_copy},
    { "__add", _wrap_Int64Vector___add},
    { "front", _wrap_Int64Vector_front},
    { "back", _wrap_Int64Vector_back},
    { "push_back", _wrap_Int64Vector_push_back},
    { "pop_back", _wrap_Int64Vector_pop_back},
    { "at", _wrap_Int64Vector_at},
    { "data", _wrap_Int64Vector_data},
    { "size", _wrap_Int64Vector_size},
    { "empty", _wrap_Int64Vector_empty},
    { "resize", _wrap_Int64Vector_resize},
    { "clear", _wrap_Int64Vector_clear},
    { "erase", _wrap_Int64Vector_erase},
    { "insert", _wrap_Int64Vector_insert},
    { "emplace", _wrap_Int64Vector_emplace},
    { "fill", _wrap_Int64Vector_fill},
    { "reverse", _wrap_Int64Vector_reverse},
    { "sort", _wrap_Int64Vector_sort},
    { "append", _wrap_Int64Vector_append},
    { "shuffle", _wrap_Int64Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_Int64Vector_meta[] = {
    { "__add", _wrap_Int64Vector___add},
    {0,0}
};

static swig_lua_attribute swig_Int64Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Vector_Sf_SwigStatic = {
    "Int64Vector",
    swig_Int64Vector_Sf_SwigStatic_methods,
    swig_Int64Vector_Sf_SwigStatic_attributes,
    swig_Int64Vector_Sf_SwigStatic_constants,
    swig_Int64Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Vector_bases[] = {0};
static const char *swig_Int64Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Vector = { "Int64Vector", "Int64Vector", &SWIGTYPE_p_Std__StdVectorT_long_long_t,_proxy__wrap_new_Int64Vector, swig_delete_Int64Vector, swig_Int64Vector_methods, swig_Int64Vector_attributes, &swig_Int64Vector_Sf_SwigStatic, swig_Int64Vector_meta, swig_Int64Vector_bases, swig_Int64Vector_base_names };

static int _wrap_UInt64Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  std::vector< unsigned long long > arg2 ;
  std::vector< unsigned long long > *argp2 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::vector",1,"Std::StdVector< u64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::vector",2,"std::vector< unsigned long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  std::vector< unsigned long long > result;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::vector",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->vector);
  {
    std::vector< unsigned long long > * resultptr = new std::vector< unsigned long long >((const std::vector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::StdVector",0,0)
  result = (Std::StdVector< u64_t > *)new Std::StdVector< u64_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< u64_t > *)new Std::StdVector< u64_t >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned long long > *arg1 = 0 ;
  Std::StdVector< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::StdVector",1,"std::initializer_list< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_UInt64Vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< u64_t > *)new Std::StdVector< u64_t >((std::initializer_list< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long long > *arg1 = 0 ;
  Std::StdVector< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::StdVector",1,"std::vector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_UInt64Vector",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< u64_t > *)new Std::StdVector< u64_t >((std::vector< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = 0 ;
  Std::StdVector< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::StdVector",1,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_UInt64Vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< u64_t > *)new Std::StdVector< u64_t >((Std::StdVector< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< u64_t >::StdVector()\n"
    "    Std::StdVector< u64_t >::StdVector(size_t)\n"
    "    Std::StdVector< u64_t >::StdVector(std::initializer_list< unsigned long long > const &)\n"
    "    Std::StdVector< u64_t >::StdVector(std::vector< unsigned long long > const &)\n"
    "    Std::StdVector< u64_t >::StdVector(Std::StdVector< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  Std::StdVector< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::copy",1,"Std::StdVector< u64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::copy",2,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  Std::StdVector< unsigned long long > *arg2 = 0 ;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::operator +",1,"Std::StdVector< u64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::operator +",2,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< unsigned long long > *) &(arg1)->operator +((Std::StdVector< unsigned long long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::front",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::back",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::push_back",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::push_back",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::pop_back",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t arg2 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::at",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::data",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::size",1,"Std::StdVector< u64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = ((Std::StdVector< u64_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::empty",1,"Std::StdVector< u64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (bool)((Std::StdVector< u64_t > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::resize",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::clear",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::erase",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::erase",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< u64_t >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt64Vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt64Vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< u64_t >::erase(size_t)\n"
    "    Std::StdVector< u64_t >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::insert",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< u64_t >::insert",3,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(unsigned long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *arg4 = 0 ;
  unsigned long long temp4 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::insert",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< u64_t >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< u64_t >::insert",4,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(unsigned long long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned long long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt64Vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UInt64Vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< u64_t >::insert(size_t,unsigned long long const &)\n"
    "    Std::StdVector< u64_t >::insert(size_t,size_t,unsigned long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  size_t arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::emplace",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< u64_t >::emplace",3,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(unsigned long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::fill",1,"Std::StdVector< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::fill",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::reverse",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_reverse",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::sort",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_sort",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  Std::StdVector< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::append",1,"Std::StdVector< u64_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< u64_t >::append",2,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_append",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_append",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->append((Std::StdVector< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< u64_t >::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< u64_t >::shuffle",1,"Std::StdVector< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Vector_shuffle",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Vector(void *obj) {
Std::StdVector< u64_t > *arg1 = (Std::StdVector< u64_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Vector_attributes[] = {
    { "vector", _wrap_UInt64Vector_vector_get, _wrap_UInt64Vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Vector_methods[]= {
    { "copy", _wrap_UInt64Vector_copy},
    { "__add", _wrap_UInt64Vector___add},
    { "front", _wrap_UInt64Vector_front},
    { "back", _wrap_UInt64Vector_back},
    { "push_back", _wrap_UInt64Vector_push_back},
    { "pop_back", _wrap_UInt64Vector_pop_back},
    { "at", _wrap_UInt64Vector_at},
    { "data", _wrap_UInt64Vector_data},
    { "size", _wrap_UInt64Vector_size},
    { "empty", _wrap_UInt64Vector_empty},
    { "resize", _wrap_UInt64Vector_resize},
    { "clear", _wrap_UInt64Vector_clear},
    { "erase", _wrap_UInt64Vector_erase},
    { "insert", _wrap_UInt64Vector_insert},
    { "emplace", _wrap_UInt64Vector_emplace},
    { "fill", _wrap_UInt64Vector_fill},
    { "reverse", _wrap_UInt64Vector_reverse},
    { "sort", _wrap_UInt64Vector_sort},
    { "append", _wrap_UInt64Vector_append},
    { "shuffle", _wrap_UInt64Vector_shuffle},
    {0,0}
};
static swig_lua_method swig_UInt64Vector_meta[] = {
    { "__add", _wrap_UInt64Vector___add},
    {0,0}
};

static swig_lua_attribute swig_UInt64Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Vector_Sf_SwigStatic = {
    "UInt64Vector",
    swig_UInt64Vector_Sf_SwigStatic_methods,
    swig_UInt64Vector_Sf_SwigStatic_attributes,
    swig_UInt64Vector_Sf_SwigStatic_constants,
    swig_UInt64Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Vector_bases[] = {0};
static const char *swig_UInt64Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Vector = { "UInt64Vector", "UInt64Vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,_proxy__wrap_new_UInt64Vector, swig_delete_UInt64Vector, swig_UInt64Vector_methods, swig_UInt64Vector_attributes, &swig_UInt64Vector_Sf_SwigStatic, swig_UInt64Vector_meta, swig_UInt64Vector_bases, swig_UInt64Vector_base_names };

static int _wrap_StringMatrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  Std::StdVector< Std::StdString > *arg2 = (Std::StdVector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::matrix",1,"Std::StdMatrix< Std::StdString > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::matrix",2,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::matrix",1,"Std::StdMatrix< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::M",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::M",1,"Std::StdMatrix< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::N",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::N",1,"Std::StdMatrix< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::StdMatrix",0,0)
  result = (Std::StdMatrix< Std::StdString > *)new Std::StdMatrix< Std::StdString >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< Std::StdString > *)new Std::StdMatrix< Std::StdString >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = 0 ;
  Std::StdMatrix< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::StdMatrix",1,"Std::StdMatrix< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("new_StringMatrix",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result = (Std::StdMatrix< Std::StdString > *)new Std::StdMatrix< Std::StdString >((Std::StdMatrix< Std::StdString > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringMatrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StringMatrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< Std::StdString >::StdMatrix()\n"
    "    Std::StdMatrix< Std::StdString >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< Std::StdString >::StdMatrix(Std::StdMatrix< Std::StdString > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StringMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::operator ()",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix___call",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (Std::StdString *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::get",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_get",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (Std::StdString *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString *arg4 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set",4,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_set",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StringMatrix_set",4,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->set(arg2,arg3,(Std::StdString const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdVector< Std::StdString > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set_row",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set_row",3,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< Std::StdString > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdVector< Std::StdString > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set_col",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::set_col",3,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< Std::StdString > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdVector< Std::StdString > result;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::row",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_row",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< Std::StdString > * resultptr = new Std::StdVector< Std::StdString >((const Std::StdVector< Std::StdString > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdVector< Std::StdString > result;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::col",1,"Std::StdMatrix< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_col",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< Std::StdString > * resultptr = new Std::StdVector< Std::StdString >((const Std::StdVector< Std::StdString > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::random_shuffle",1,"Std::StdMatrix< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::data",1,"Std::StdMatrix< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_data",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result = (Std::StdString *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::size",1,"Std::StdMatrix< Std::StdString > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_size",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result = ((Std::StdMatrix< Std::StdString > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::rows",1,"Std::StdMatrix< Std::StdString > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result = ((Std::StdMatrix< Std::StdString > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< Std::StdString >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< Std::StdString >::cols",1,"Std::StdMatrix< Std::StdString > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,0))){
    SWIG_fail_ptr("StringMatrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t);
  }
  
  result = ((Std::StdMatrix< Std::StdString > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringMatrix(void *obj) {
Std::StdMatrix< Std::StdString > *arg1 = (Std::StdMatrix< Std::StdString > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringMatrix_attributes[] = {
    { "matrix", _wrap_StringMatrix_matrix_get, _wrap_StringMatrix_matrix_set },
    { "M", _wrap_StringMatrix_M_get, _wrap_StringMatrix_M_set },
    { "N", _wrap_StringMatrix_N_get, _wrap_StringMatrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_StringMatrix_methods[]= {
    { "__call", _wrap_StringMatrix___call},
    { "get", _wrap_StringMatrix_get},
    { "set", _wrap_StringMatrix_set},
    { "set_row", _wrap_StringMatrix_set_row},
    { "set_col", _wrap_StringMatrix_set_col},
    { "row", _wrap_StringMatrix_row},
    { "col", _wrap_StringMatrix_col},
    { "random_shuffle", _wrap_StringMatrix_random_shuffle},
    { "data", _wrap_StringMatrix_data},
    { "size", _wrap_StringMatrix_size},
    { "rows", _wrap_StringMatrix_rows},
    { "cols", _wrap_StringMatrix_cols},
    {0,0}
};
static swig_lua_method swig_StringMatrix_meta[] = {
    { "__call", _wrap_StringMatrix___call},
    {0,0}
};

static swig_lua_attribute swig_StringMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringMatrix_Sf_SwigStatic = {
    "StringMatrix",
    swig_StringMatrix_Sf_SwigStatic_methods,
    swig_StringMatrix_Sf_SwigStatic_attributes,
    swig_StringMatrix_Sf_SwigStatic_constants,
    swig_StringMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringMatrix_bases[] = {0};
static const char *swig_StringMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_StringMatrix = { "StringMatrix", "StringMatrix", &SWIGTYPE_p_Std__StdMatrixT_Std__StdString_t,_proxy__wrap_new_StringMatrix, swig_delete_StringMatrix, swig_StringMatrix_methods, swig_StringMatrix_attributes, &swig_StringMatrix_Sf_SwigStatic, swig_StringMatrix_meta, swig_StringMatrix_bases, swig_StringMatrix_base_names };

static int _wrap_FloatMatrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  Std::StdVector< float > *arg2 = (Std::StdVector< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::matrix",1,"Std::StdMatrix< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::matrix",2,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::matrix",1,"Std::StdMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result = (Std::StdVector< float > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::M",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< float >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::M",1,"Std::StdMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::N",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< float >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::N",1,"Std::StdMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::StdMatrix",0,0)
  result = (Std::StdMatrix< float > *)new Std::StdMatrix< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< float > *)new Std::StdMatrix< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = 0 ;
  Std::StdMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::StdMatrix",1,"Std::StdMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result = (Std::StdMatrix< float > *)new Std::StdMatrix< float >((Std::StdMatrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatMatrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< float >::StdMatrix()\n"
    "    Std::StdMatrix< float >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< float >::StdMatrix(Std::StdMatrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::operator ()",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___call",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::get",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< float >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_get",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = 0 ;
  float temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::set",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< float >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< float >::set",4,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(float)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(float const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  Std::StdVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::set_row",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< float >::set_row",3,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  Std::StdVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::set_col",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< float >::set_col",3,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  Std::StdVector< float > result;
  
  SWIG_check_num_args("Std::StdMatrix< float >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::row",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_row",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< float > * resultptr = new Std::StdVector< float >((const Std::StdVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t arg2 ;
  Std::StdVector< float > result;
  
  SWIG_check_num_args("Std::StdMatrix< float >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::col",1,"Std::StdMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< float >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_col",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< float > * resultptr = new Std::StdVector< float >((const Std::StdVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::random_shuffle",1,"Std::StdMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::data",1,"Std::StdMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_data",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::size",1,"Std::StdMatrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_size",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result = ((Std::StdMatrix< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::rows",1,"Std::StdMatrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result = ((Std::StdMatrix< float > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< float >::cols",1,"Std::StdMatrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_float_t);
  }
  
  result = ((Std::StdMatrix< float > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatMatrix(void *obj) {
Std::StdMatrix< float > *arg1 = (Std::StdMatrix< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatMatrix_attributes[] = {
    { "matrix", _wrap_FloatMatrix_matrix_get, _wrap_FloatMatrix_matrix_set },
    { "M", _wrap_FloatMatrix_M_get, _wrap_FloatMatrix_M_set },
    { "N", _wrap_FloatMatrix_N_get, _wrap_FloatMatrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_FloatMatrix_methods[]= {
    { "__call", _wrap_FloatMatrix___call},
    { "get", _wrap_FloatMatrix_get},
    { "set", _wrap_FloatMatrix_set},
    { "set_row", _wrap_FloatMatrix_set_row},
    { "set_col", _wrap_FloatMatrix_set_col},
    { "row", _wrap_FloatMatrix_row},
    { "col", _wrap_FloatMatrix_col},
    { "random_shuffle", _wrap_FloatMatrix_random_shuffle},
    { "data", _wrap_FloatMatrix_data},
    { "size", _wrap_FloatMatrix_size},
    { "rows", _wrap_FloatMatrix_rows},
    { "cols", _wrap_FloatMatrix_cols},
    {0,0}
};
static swig_lua_method swig_FloatMatrix_meta[] = {
    { "__call", _wrap_FloatMatrix___call},
    {0,0}
};

static swig_lua_attribute swig_FloatMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatMatrix_Sf_SwigStatic = {
    "FloatMatrix",
    swig_FloatMatrix_Sf_SwigStatic_methods,
    swig_FloatMatrix_Sf_SwigStatic_attributes,
    swig_FloatMatrix_Sf_SwigStatic_constants,
    swig_FloatMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatMatrix_bases[] = {0};
static const char *swig_FloatMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_FloatMatrix = { "FloatMatrix", "FloatMatrix", &SWIGTYPE_p_Std__StdMatrixT_float_t,_proxy__wrap_new_FloatMatrix, swig_delete_FloatMatrix, swig_FloatMatrix_methods, swig_FloatMatrix_attributes, &swig_FloatMatrix_Sf_SwigStatic, swig_FloatMatrix_meta, swig_FloatMatrix_bases, swig_FloatMatrix_base_names };

static int _wrap_DoubleMatrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  Std::StdVector< double > *arg2 = (Std::StdVector< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::matrix",1,"Std::StdMatrix< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::matrix",2,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::matrix",1,"Std::StdMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result = (Std::StdVector< double > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::M",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< double >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::M",1,"Std::StdMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::N",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< double >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::N",1,"Std::StdMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::StdMatrix",0,0)
  result = (Std::StdMatrix< double > *)new Std::StdMatrix< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< double > *)new Std::StdMatrix< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = 0 ;
  Std::StdMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::StdMatrix",1,"Std::StdMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result = (Std::StdMatrix< double > *)new Std::StdMatrix< double >((Std::StdMatrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleMatrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< double >::StdMatrix()\n"
    "    Std::StdMatrix< double >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< double >::StdMatrix(Std::StdMatrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::operator ()",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< double >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___call",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::get",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< double >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_get",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = 0 ;
  double temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::set",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< double >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< double >::set",4,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(double)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(double const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  Std::StdVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::set_row",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< double >::set_row",3,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  Std::StdVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::set_col",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< double >::set_col",3,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  Std::StdVector< double > result;
  
  SWIG_check_num_args("Std::StdMatrix< double >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::row",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_row",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< double > * resultptr = new Std::StdVector< double >((const Std::StdVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t arg2 ;
  Std::StdVector< double > result;
  
  SWIG_check_num_args("Std::StdMatrix< double >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::col",1,"Std::StdMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< double >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_col",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< double > * resultptr = new Std::StdVector< double >((const Std::StdVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::random_shuffle",1,"Std::StdMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::data",1,"Std::StdMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_data",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::size",1,"Std::StdMatrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_size",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result = ((Std::StdMatrix< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::rows",1,"Std::StdMatrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result = ((Std::StdMatrix< double > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< double >::cols",1,"Std::StdMatrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_double_t);
  }
  
  result = ((Std::StdMatrix< double > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleMatrix(void *obj) {
Std::StdMatrix< double > *arg1 = (Std::StdMatrix< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleMatrix_attributes[] = {
    { "matrix", _wrap_DoubleMatrix_matrix_get, _wrap_DoubleMatrix_matrix_set },
    { "M", _wrap_DoubleMatrix_M_get, _wrap_DoubleMatrix_M_set },
    { "N", _wrap_DoubleMatrix_N_get, _wrap_DoubleMatrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleMatrix_methods[]= {
    { "__call", _wrap_DoubleMatrix___call},
    { "get", _wrap_DoubleMatrix_get},
    { "set", _wrap_DoubleMatrix_set},
    { "set_row", _wrap_DoubleMatrix_set_row},
    { "set_col", _wrap_DoubleMatrix_set_col},
    { "row", _wrap_DoubleMatrix_row},
    { "col", _wrap_DoubleMatrix_col},
    { "random_shuffle", _wrap_DoubleMatrix_random_shuffle},
    { "data", _wrap_DoubleMatrix_data},
    { "size", _wrap_DoubleMatrix_size},
    { "rows", _wrap_DoubleMatrix_rows},
    { "cols", _wrap_DoubleMatrix_cols},
    {0,0}
};
static swig_lua_method swig_DoubleMatrix_meta[] = {
    { "__call", _wrap_DoubleMatrix___call},
    {0,0}
};

static swig_lua_attribute swig_DoubleMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleMatrix_Sf_SwigStatic = {
    "DoubleMatrix",
    swig_DoubleMatrix_Sf_SwigStatic_methods,
    swig_DoubleMatrix_Sf_SwigStatic_attributes,
    swig_DoubleMatrix_Sf_SwigStatic_constants,
    swig_DoubleMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleMatrix_bases[] = {0};
static const char *swig_DoubleMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleMatrix = { "DoubleMatrix", "DoubleMatrix", &SWIGTYPE_p_Std__StdMatrixT_double_t,_proxy__wrap_new_DoubleMatrix, swig_delete_DoubleMatrix, swig_DoubleMatrix_methods, swig_DoubleMatrix_attributes, &swig_DoubleMatrix_Sf_SwigStatic, swig_DoubleMatrix_meta, swig_DoubleMatrix_bases, swig_DoubleMatrix_base_names };

static int _wrap_Int8Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  Std::StdVector< signed char > *arg2 = (Std::StdVector< signed char > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::matrix",1,"Std::StdMatrix< int8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::matrix",2,"Std::StdVector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::matrix",1,"Std::StdMatrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result = (Std::StdVector< signed char > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::M",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::M",1,"Std::StdMatrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::N",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::N",1,"Std::StdMatrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< int8_t > *)new Std::StdMatrix< int8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< int8_t > *)new Std::StdMatrix< int8_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< signed char > *arg1 = 0 ;
  Std::StdMatrix< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::StdMatrix",1,"Std::StdMatrix< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Matrix",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result = (Std::StdMatrix< int8_t > *)new Std::StdMatrix< int8_t >((Std::StdMatrix< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int8Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< int8_t >::StdMatrix()\n"
    "    Std::StdMatrix< int8_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< int8_t >::StdMatrix(Std::StdMatrix< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::operator ()",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int8_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (signed char *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::get",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int8_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (signed char *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char *arg4 = 0 ;
  signed char temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set",4,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(signed char)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(signed char const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< signed char > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set_row",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set_row",3,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< signed char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< signed char > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set_col",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< int8_t >::set_col",3,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< signed char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< signed char > result;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::row",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< signed char > * resultptr = new Std::StdVector< signed char >((const Std::StdVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< signed char > result;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::col",1,"Std::StdMatrix< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int8_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< signed char > * resultptr = new Std::StdVector< signed char >((const Std::StdVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::random_shuffle",1,"Std::StdMatrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::data",1,"Std::StdMatrix< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result = (signed char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::size",1,"Std::StdMatrix< int8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result = ((Std::StdMatrix< int8_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::rows",1,"Std::StdMatrix< int8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result = ((Std::StdMatrix< int8_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int8_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int8_t >::cols",1,"Std::StdMatrix< int8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_signed_char_t);
  }
  
  result = ((Std::StdMatrix< int8_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Matrix(void *obj) {
Std::StdMatrix< int8_t > *arg1 = (Std::StdMatrix< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Matrix_attributes[] = {
    { "matrix", _wrap_Int8Matrix_matrix_get, _wrap_Int8Matrix_matrix_set },
    { "M", _wrap_Int8Matrix_M_get, _wrap_Int8Matrix_M_set },
    { "N", _wrap_Int8Matrix_N_get, _wrap_Int8Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Matrix_methods[]= {
    { "__call", _wrap_Int8Matrix___call},
    { "get", _wrap_Int8Matrix_get},
    { "set", _wrap_Int8Matrix_set},
    { "set_row", _wrap_Int8Matrix_set_row},
    { "set_col", _wrap_Int8Matrix_set_col},
    { "row", _wrap_Int8Matrix_row},
    { "col", _wrap_Int8Matrix_col},
    { "random_shuffle", _wrap_Int8Matrix_random_shuffle},
    { "data", _wrap_Int8Matrix_data},
    { "size", _wrap_Int8Matrix_size},
    { "rows", _wrap_Int8Matrix_rows},
    { "cols", _wrap_Int8Matrix_cols},
    {0,0}
};
static swig_lua_method swig_Int8Matrix_meta[] = {
    { "__call", _wrap_Int8Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int8Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Matrix_Sf_SwigStatic = {
    "Int8Matrix",
    swig_Int8Matrix_Sf_SwigStatic_methods,
    swig_Int8Matrix_Sf_SwigStatic_attributes,
    swig_Int8Matrix_Sf_SwigStatic_constants,
    swig_Int8Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Matrix_bases[] = {0};
static const char *swig_Int8Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Matrix = { "Int8Matrix", "Int8Matrix", &SWIGTYPE_p_Std__StdMatrixT_signed_char_t,_proxy__wrap_new_Int8Matrix, swig_delete_Int8Matrix, swig_Int8Matrix_methods, swig_Int8Matrix_attributes, &swig_Int8Matrix_Sf_SwigStatic, swig_Int8Matrix_meta, swig_Int8Matrix_bases, swig_Int8Matrix_base_names };

static int _wrap_UInt8Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  Std::StdVector< unsigned char > *arg2 = (Std::StdVector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::matrix",1,"Std::StdMatrix< uint8_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::matrix",2,"Std::StdVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::matrix",1,"Std::StdMatrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result = (Std::StdVector< unsigned char > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::M",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::M",1,"Std::StdMatrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::N",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::N",1,"Std::StdMatrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< uint8_t > *)new Std::StdMatrix< uint8_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< uint8_t > *)new Std::StdMatrix< uint8_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< unsigned char > *arg1 = 0 ;
  Std::StdMatrix< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::StdMatrix",1,"Std::StdMatrix< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Matrix",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result = (Std::StdMatrix< uint8_t > *)new Std::StdMatrix< uint8_t >((Std::StdMatrix< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt8Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< uint8_t >::StdMatrix()\n"
    "    Std::StdMatrix< uint8_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< uint8_t >::StdMatrix(Std::StdMatrix< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::operator ()",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned char *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::get",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned char *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char *arg4 = 0 ;
  unsigned char temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set",4,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(unsigned char)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(unsigned char const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned char > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set_row",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set_row",3,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< unsigned char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned char > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set_col",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::set_col",3,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< unsigned char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned char > result;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::row",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< unsigned char > * resultptr = new Std::StdVector< unsigned char >((const Std::StdVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned char > result;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::col",1,"Std::StdMatrix< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< unsigned char > * resultptr = new Std::StdVector< unsigned char >((const Std::StdVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::random_shuffle",1,"Std::StdMatrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::data",1,"Std::StdMatrix< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result = (unsigned char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::size",1,"Std::StdMatrix< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result = ((Std::StdMatrix< uint8_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::rows",1,"Std::StdMatrix< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result = ((Std::StdMatrix< uint8_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint8_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint8_t >::cols",1,"Std::StdMatrix< uint8_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t);
  }
  
  result = ((Std::StdMatrix< uint8_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8Matrix(void *obj) {
Std::StdMatrix< uint8_t > *arg1 = (Std::StdMatrix< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Matrix_attributes[] = {
    { "matrix", _wrap_UInt8Matrix_matrix_get, _wrap_UInt8Matrix_matrix_set },
    { "M", _wrap_UInt8Matrix_M_get, _wrap_UInt8Matrix_M_set },
    { "N", _wrap_UInt8Matrix_N_get, _wrap_UInt8Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Matrix_methods[]= {
    { "__call", _wrap_UInt8Matrix___call},
    { "get", _wrap_UInt8Matrix_get},
    { "set", _wrap_UInt8Matrix_set},
    { "set_row", _wrap_UInt8Matrix_set_row},
    { "set_col", _wrap_UInt8Matrix_set_col},
    { "row", _wrap_UInt8Matrix_row},
    { "col", _wrap_UInt8Matrix_col},
    { "random_shuffle", _wrap_UInt8Matrix_random_shuffle},
    { "data", _wrap_UInt8Matrix_data},
    { "size", _wrap_UInt8Matrix_size},
    { "rows", _wrap_UInt8Matrix_rows},
    { "cols", _wrap_UInt8Matrix_cols},
    {0,0}
};
static swig_lua_method swig_UInt8Matrix_meta[] = {
    { "__call", _wrap_UInt8Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt8Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Matrix_Sf_SwigStatic = {
    "UInt8Matrix",
    swig_UInt8Matrix_Sf_SwigStatic_methods,
    swig_UInt8Matrix_Sf_SwigStatic_attributes,
    swig_UInt8Matrix_Sf_SwigStatic_constants,
    swig_UInt8Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Matrix_bases[] = {0};
static const char *swig_UInt8Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8Matrix = { "UInt8Matrix", "UInt8Matrix", &SWIGTYPE_p_Std__StdMatrixT_unsigned_char_t,_proxy__wrap_new_UInt8Matrix, swig_delete_UInt8Matrix, swig_UInt8Matrix_methods, swig_UInt8Matrix_attributes, &swig_UInt8Matrix_Sf_SwigStatic, swig_UInt8Matrix_meta, swig_UInt8Matrix_bases, swig_UInt8Matrix_base_names };

static int _wrap_Int16Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  Std::StdVector< short > *arg2 = (Std::StdVector< short > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::matrix",1,"Std::StdMatrix< int16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::matrix",2,"Std::StdVector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::matrix",1,"Std::StdMatrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result = (Std::StdVector< short > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::M",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::M",1,"Std::StdMatrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::N",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::N",1,"Std::StdMatrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< int16_t > *)new Std::StdMatrix< int16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< int16_t > *)new Std::StdMatrix< int16_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< short > *arg1 = 0 ;
  Std::StdMatrix< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::StdMatrix",1,"Std::StdMatrix< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("new_Int16Matrix",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result = (Std::StdMatrix< int16_t > *)new Std::StdMatrix< int16_t >((Std::StdMatrix< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int16Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< int16_t >::StdMatrix()\n"
    "    Std::StdMatrix< int16_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< int16_t >::StdMatrix(Std::StdMatrix< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::operator ()",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int16_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (short *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::get",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int16_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (short *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short *arg4 = 0 ;
  short temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set",4,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(short)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(short const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< short > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set_row",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set_row",3,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< short > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set_col",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< int16_t >::set_col",3,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< short > result;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::row",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< short > * resultptr = new Std::StdVector< short >((const Std::StdVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< short > result;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::col",1,"Std::StdMatrix< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int16_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< short > * resultptr = new Std::StdVector< short >((const Std::StdVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::random_shuffle",1,"Std::StdMatrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::data",1,"Std::StdMatrix< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::size",1,"Std::StdMatrix< int16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result = ((Std::StdMatrix< int16_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::rows",1,"Std::StdMatrix< int16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result = ((Std::StdMatrix< int16_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int16_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int16_t >::cols",1,"Std::StdMatrix< int16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_short_t);
  }
  
  result = ((Std::StdMatrix< int16_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Matrix(void *obj) {
Std::StdMatrix< int16_t > *arg1 = (Std::StdMatrix< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Matrix_attributes[] = {
    { "matrix", _wrap_Int16Matrix_matrix_get, _wrap_Int16Matrix_matrix_set },
    { "M", _wrap_Int16Matrix_M_get, _wrap_Int16Matrix_M_set },
    { "N", _wrap_Int16Matrix_N_get, _wrap_Int16Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Matrix_methods[]= {
    { "__call", _wrap_Int16Matrix___call},
    { "get", _wrap_Int16Matrix_get},
    { "set", _wrap_Int16Matrix_set},
    { "set_row", _wrap_Int16Matrix_set_row},
    { "set_col", _wrap_Int16Matrix_set_col},
    { "row", _wrap_Int16Matrix_row},
    { "col", _wrap_Int16Matrix_col},
    { "random_shuffle", _wrap_Int16Matrix_random_shuffle},
    { "data", _wrap_Int16Matrix_data},
    { "size", _wrap_Int16Matrix_size},
    { "rows", _wrap_Int16Matrix_rows},
    { "cols", _wrap_Int16Matrix_cols},
    {0,0}
};
static swig_lua_method swig_Int16Matrix_meta[] = {
    { "__call", _wrap_Int16Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int16Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Matrix_Sf_SwigStatic = {
    "Int16Matrix",
    swig_Int16Matrix_Sf_SwigStatic_methods,
    swig_Int16Matrix_Sf_SwigStatic_attributes,
    swig_Int16Matrix_Sf_SwigStatic_constants,
    swig_Int16Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Matrix_bases[] = {0};
static const char *swig_Int16Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Matrix = { "Int16Matrix", "Int16Matrix", &SWIGTYPE_p_Std__StdMatrixT_short_t,_proxy__wrap_new_Int16Matrix, swig_delete_Int16Matrix, swig_Int16Matrix_methods, swig_Int16Matrix_attributes, &swig_Int16Matrix_Sf_SwigStatic, swig_Int16Matrix_meta, swig_Int16Matrix_bases, swig_Int16Matrix_base_names };

static int _wrap_UInt16Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  Std::StdVector< unsigned short > *arg2 = (Std::StdVector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::matrix",1,"Std::StdMatrix< uint16_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::matrix",2,"Std::StdVector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::matrix",1,"Std::StdMatrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result = (Std::StdVector< unsigned short > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::M",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::M",1,"Std::StdMatrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::N",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::N",1,"Std::StdMatrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< uint16_t > *)new Std::StdMatrix< uint16_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< uint16_t > *)new Std::StdMatrix< uint16_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< unsigned short > *arg1 = 0 ;
  Std::StdMatrix< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::StdMatrix",1,"Std::StdMatrix< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Matrix",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result = (Std::StdMatrix< uint16_t > *)new Std::StdMatrix< uint16_t >((Std::StdMatrix< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt16Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< uint16_t >::StdMatrix()\n"
    "    Std::StdMatrix< uint16_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< uint16_t >::StdMatrix(Std::StdMatrix< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::operator ()",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned short *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::get",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned short *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short *arg4 = 0 ;
  unsigned short temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set",4,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(unsigned short)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(unsigned short const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned short > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set_row",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set_row",3,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< unsigned short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned short > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set_col",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::set_col",3,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< unsigned short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned short > result;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::row",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< unsigned short > * resultptr = new Std::StdVector< unsigned short >((const Std::StdVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned short > result;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::col",1,"Std::StdMatrix< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< unsigned short > * resultptr = new Std::StdVector< unsigned short >((const Std::StdVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::random_shuffle",1,"Std::StdMatrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::data",1,"Std::StdMatrix< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result = (unsigned short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::size",1,"Std::StdMatrix< uint16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result = ((Std::StdMatrix< uint16_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::rows",1,"Std::StdMatrix< uint16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result = ((Std::StdMatrix< uint16_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint16_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint16_t >::cols",1,"Std::StdMatrix< uint16_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t);
  }
  
  result = ((Std::StdMatrix< uint16_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Matrix(void *obj) {
Std::StdMatrix< uint16_t > *arg1 = (Std::StdMatrix< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Matrix_attributes[] = {
    { "matrix", _wrap_UInt16Matrix_matrix_get, _wrap_UInt16Matrix_matrix_set },
    { "M", _wrap_UInt16Matrix_M_get, _wrap_UInt16Matrix_M_set },
    { "N", _wrap_UInt16Matrix_N_get, _wrap_UInt16Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Matrix_methods[]= {
    { "__call", _wrap_UInt16Matrix___call},
    { "get", _wrap_UInt16Matrix_get},
    { "set", _wrap_UInt16Matrix_set},
    { "set_row", _wrap_UInt16Matrix_set_row},
    { "set_col", _wrap_UInt16Matrix_set_col},
    { "row", _wrap_UInt16Matrix_row},
    { "col", _wrap_UInt16Matrix_col},
    { "random_shuffle", _wrap_UInt16Matrix_random_shuffle},
    { "data", _wrap_UInt16Matrix_data},
    { "size", _wrap_UInt16Matrix_size},
    { "rows", _wrap_UInt16Matrix_rows},
    { "cols", _wrap_UInt16Matrix_cols},
    {0,0}
};
static swig_lua_method swig_UInt16Matrix_meta[] = {
    { "__call", _wrap_UInt16Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt16Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Matrix_Sf_SwigStatic = {
    "UInt16Matrix",
    swig_UInt16Matrix_Sf_SwigStatic_methods,
    swig_UInt16Matrix_Sf_SwigStatic_attributes,
    swig_UInt16Matrix_Sf_SwigStatic_constants,
    swig_UInt16Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Matrix_bases[] = {0};
static const char *swig_UInt16Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Matrix = { "UInt16Matrix", "UInt16Matrix", &SWIGTYPE_p_Std__StdMatrixT_unsigned_short_t,_proxy__wrap_new_UInt16Matrix, swig_delete_UInt16Matrix, swig_UInt16Matrix_methods, swig_UInt16Matrix_attributes, &swig_UInt16Matrix_Sf_SwigStatic, swig_UInt16Matrix_meta, swig_UInt16Matrix_bases, swig_UInt16Matrix_base_names };

static int _wrap_Int32Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  Std::StdVector< int > *arg2 = (Std::StdVector< int > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::matrix",1,"Std::StdMatrix< int32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::matrix",2,"Std::StdVector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::matrix",1,"Std::StdMatrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result = (Std::StdVector< int > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::M",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::M",1,"Std::StdMatrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::N",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::N",1,"Std::StdMatrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< int32_t > *)new Std::StdMatrix< int32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< int32_t > *)new Std::StdMatrix< int32_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int > *arg1 = 0 ;
  Std::StdMatrix< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::StdMatrix",1,"Std::StdMatrix< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("new_Int32Matrix",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result = (Std::StdMatrix< int32_t > *)new Std::StdMatrix< int32_t >((Std::StdMatrix< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int32Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< int32_t >::StdMatrix()\n"
    "    Std::StdMatrix< int32_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< int32_t >::StdMatrix(Std::StdMatrix< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::operator ()",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int32_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::get",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int32_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (int *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *arg4 = 0 ;
  int temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set",4,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(int)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(int const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< int > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set_row",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set_row",3,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< int > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set_col",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< int32_t >::set_col",3,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< int > result;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::row",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< int > * resultptr = new Std::StdVector< int >((const Std::StdVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< int > result;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::col",1,"Std::StdMatrix< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< int32_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< int > * resultptr = new Std::StdVector< int >((const Std::StdVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::random_shuffle",1,"Std::StdMatrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::data",1,"Std::StdMatrix< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::size",1,"Std::StdMatrix< int32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result = ((Std::StdMatrix< int32_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::rows",1,"Std::StdMatrix< int32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result = ((Std::StdMatrix< int32_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< int32_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< int32_t >::cols",1,"Std::StdMatrix< int32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_int_t);
  }
  
  result = ((Std::StdMatrix< int32_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Matrix(void *obj) {
Std::StdMatrix< int32_t > *arg1 = (Std::StdMatrix< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Matrix_attributes[] = {
    { "matrix", _wrap_Int32Matrix_matrix_get, _wrap_Int32Matrix_matrix_set },
    { "M", _wrap_Int32Matrix_M_get, _wrap_Int32Matrix_M_set },
    { "N", _wrap_Int32Matrix_N_get, _wrap_Int32Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Matrix_methods[]= {
    { "__call", _wrap_Int32Matrix___call},
    { "get", _wrap_Int32Matrix_get},
    { "set", _wrap_Int32Matrix_set},
    { "set_row", _wrap_Int32Matrix_set_row},
    { "set_col", _wrap_Int32Matrix_set_col},
    { "row", _wrap_Int32Matrix_row},
    { "col", _wrap_Int32Matrix_col},
    { "random_shuffle", _wrap_Int32Matrix_random_shuffle},
    { "data", _wrap_Int32Matrix_data},
    { "size", _wrap_Int32Matrix_size},
    { "rows", _wrap_Int32Matrix_rows},
    { "cols", _wrap_Int32Matrix_cols},
    {0,0}
};
static swig_lua_method swig_Int32Matrix_meta[] = {
    { "__call", _wrap_Int32Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int32Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Matrix_Sf_SwigStatic = {
    "Int32Matrix",
    swig_Int32Matrix_Sf_SwigStatic_methods,
    swig_Int32Matrix_Sf_SwigStatic_attributes,
    swig_Int32Matrix_Sf_SwigStatic_constants,
    swig_Int32Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Matrix_bases[] = {0};
static const char *swig_Int32Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Matrix = { "Int32Matrix", "Int32Matrix", &SWIGTYPE_p_Std__StdMatrixT_int_t,_proxy__wrap_new_Int32Matrix, swig_delete_Int32Matrix, swig_Int32Matrix_methods, swig_Int32Matrix_attributes, &swig_Int32Matrix_Sf_SwigStatic, swig_Int32Matrix_meta, swig_Int32Matrix_bases, swig_Int32Matrix_base_names };

static int _wrap_UInt32Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  Std::StdVector< unsigned int > *arg2 = (Std::StdVector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::matrix",1,"Std::StdMatrix< uint32_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::matrix",2,"Std::StdVector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::matrix",1,"Std::StdMatrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result = (Std::StdVector< unsigned int > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::M",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::M",1,"Std::StdMatrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::N",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::N",1,"Std::StdMatrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< uint32_t > *)new Std::StdMatrix< uint32_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< uint32_t > *)new Std::StdMatrix< uint32_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< unsigned int > *arg1 = 0 ;
  Std::StdMatrix< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::StdMatrix",1,"Std::StdMatrix< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Matrix",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result = (Std::StdMatrix< uint32_t > *)new Std::StdMatrix< uint32_t >((Std::StdMatrix< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt32Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< uint32_t >::StdMatrix()\n"
    "    Std::StdMatrix< uint32_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< uint32_t >::StdMatrix(Std::StdMatrix< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::operator ()",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned int *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::get",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned int *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *arg4 = 0 ;
  unsigned int temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set",4,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(unsigned int)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(unsigned int const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set_row",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set_row",3,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set_col",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::set_col",3,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned int > result;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::row",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< unsigned int > * resultptr = new Std::StdVector< unsigned int >((const Std::StdVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned int > result;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::col",1,"Std::StdMatrix< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< unsigned int > * resultptr = new Std::StdVector< unsigned int >((const Std::StdVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::random_shuffle",1,"Std::StdMatrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::data",1,"Std::StdMatrix< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result = (unsigned int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::size",1,"Std::StdMatrix< uint32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result = ((Std::StdMatrix< uint32_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::rows",1,"Std::StdMatrix< uint32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result = ((Std::StdMatrix< uint32_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< uint32_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< uint32_t >::cols",1,"Std::StdMatrix< uint32_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t);
  }
  
  result = ((Std::StdMatrix< uint32_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Matrix(void *obj) {
Std::StdMatrix< uint32_t > *arg1 = (Std::StdMatrix< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Matrix_attributes[] = {
    { "matrix", _wrap_UInt32Matrix_matrix_get, _wrap_UInt32Matrix_matrix_set },
    { "M", _wrap_UInt32Matrix_M_get, _wrap_UInt32Matrix_M_set },
    { "N", _wrap_UInt32Matrix_N_get, _wrap_UInt32Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Matrix_methods[]= {
    { "__call", _wrap_UInt32Matrix___call},
    { "get", _wrap_UInt32Matrix_get},
    { "set", _wrap_UInt32Matrix_set},
    { "set_row", _wrap_UInt32Matrix_set_row},
    { "set_col", _wrap_UInt32Matrix_set_col},
    { "row", _wrap_UInt32Matrix_row},
    { "col", _wrap_UInt32Matrix_col},
    { "random_shuffle", _wrap_UInt32Matrix_random_shuffle},
    { "data", _wrap_UInt32Matrix_data},
    { "size", _wrap_UInt32Matrix_size},
    { "rows", _wrap_UInt32Matrix_rows},
    { "cols", _wrap_UInt32Matrix_cols},
    {0,0}
};
static swig_lua_method swig_UInt32Matrix_meta[] = {
    { "__call", _wrap_UInt32Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt32Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Matrix_Sf_SwigStatic = {
    "UInt32Matrix",
    swig_UInt32Matrix_Sf_SwigStatic_methods,
    swig_UInt32Matrix_Sf_SwigStatic_attributes,
    swig_UInt32Matrix_Sf_SwigStatic_constants,
    swig_UInt32Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Matrix_bases[] = {0};
static const char *swig_UInt32Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Matrix = { "UInt32Matrix", "UInt32Matrix", &SWIGTYPE_p_Std__StdMatrixT_unsigned_int_t,_proxy__wrap_new_UInt32Matrix, swig_delete_UInt32Matrix, swig_UInt32Matrix_methods, swig_UInt32Matrix_attributes, &swig_UInt32Matrix_Sf_SwigStatic, swig_UInt32Matrix_meta, swig_UInt32Matrix_bases, swig_UInt32Matrix_base_names };

static int _wrap_Int64Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  Std::StdVector< long long > *arg2 = (Std::StdVector< long long > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::matrix",1,"Std::StdMatrix< i64_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::matrix",2,"Std::StdVector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::matrix",1,"Std::StdMatrix< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result = (Std::StdVector< long long > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::M",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::M",1,"Std::StdMatrix< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::N",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::N",1,"Std::StdMatrix< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< i64_t > *)new Std::StdMatrix< i64_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< i64_t > *)new Std::StdMatrix< i64_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< long long > *arg1 = 0 ;
  Std::StdMatrix< i64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::StdMatrix",1,"Std::StdMatrix< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("new_Int64Matrix",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result = (Std::StdMatrix< i64_t > *)new Std::StdMatrix< i64_t >((Std::StdMatrix< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int64Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< i64_t >::StdMatrix()\n"
    "    Std::StdMatrix< i64_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< i64_t >::StdMatrix(Std::StdMatrix< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::operator ()",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< i64_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::get",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< i64_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (long long *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *arg4 = 0 ;
  long long temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set",4,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(long long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(long long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set_row",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set_row",3,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< long long > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set_col",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< i64_t >::set_col",3,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< long long > result;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::row",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< long long > * resultptr = new Std::StdVector< long long >((const Std::StdVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< long long > result;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::col",1,"Std::StdMatrix< i64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< i64_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< long long > * resultptr = new Std::StdVector< long long >((const Std::StdVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::random_shuffle",1,"Std::StdMatrix< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::data",1,"Std::StdMatrix< i64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result = (long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::size",1,"Std::StdMatrix< i64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result = ((Std::StdMatrix< i64_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::rows",1,"Std::StdMatrix< i64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result = ((Std::StdMatrix< i64_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< i64_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< i64_t >::cols",1,"Std::StdMatrix< i64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_long_long_t,0))){
    SWIG_fail_ptr("Int64Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_long_long_t);
  }
  
  result = ((Std::StdMatrix< i64_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Matrix(void *obj) {
Std::StdMatrix< i64_t > *arg1 = (Std::StdMatrix< i64_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Matrix_attributes[] = {
    { "matrix", _wrap_Int64Matrix_matrix_get, _wrap_Int64Matrix_matrix_set },
    { "M", _wrap_Int64Matrix_M_get, _wrap_Int64Matrix_M_set },
    { "N", _wrap_Int64Matrix_N_get, _wrap_Int64Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Matrix_methods[]= {
    { "__call", _wrap_Int64Matrix___call},
    { "get", _wrap_Int64Matrix_get},
    { "set", _wrap_Int64Matrix_set},
    { "set_row", _wrap_Int64Matrix_set_row},
    { "set_col", _wrap_Int64Matrix_set_col},
    { "row", _wrap_Int64Matrix_row},
    { "col", _wrap_Int64Matrix_col},
    { "random_shuffle", _wrap_Int64Matrix_random_shuffle},
    { "data", _wrap_Int64Matrix_data},
    { "size", _wrap_Int64Matrix_size},
    { "rows", _wrap_Int64Matrix_rows},
    { "cols", _wrap_Int64Matrix_cols},
    {0,0}
};
static swig_lua_method swig_Int64Matrix_meta[] = {
    { "__call", _wrap_Int64Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_Int64Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Matrix_Sf_SwigStatic = {
    "Int64Matrix",
    swig_Int64Matrix_Sf_SwigStatic_methods,
    swig_Int64Matrix_Sf_SwigStatic_attributes,
    swig_Int64Matrix_Sf_SwigStatic_constants,
    swig_Int64Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Matrix_bases[] = {0};
static const char *swig_Int64Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Matrix = { "Int64Matrix", "Int64Matrix", &SWIGTYPE_p_Std__StdMatrixT_long_long_t,_proxy__wrap_new_Int64Matrix, swig_delete_Int64Matrix, swig_Int64Matrix_methods, swig_Int64Matrix_attributes, &swig_Int64Matrix_Sf_SwigStatic, swig_Int64Matrix_meta, swig_Int64Matrix_bases, swig_Int64Matrix_base_names };

static int _wrap_UInt64Matrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  Std::StdVector< unsigned long long > *arg2 = (Std::StdVector< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::matrix",1,"Std::StdMatrix< u64_t > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::matrix",2,"Std::StdVector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_matrix_set",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::matrix",1,"Std::StdMatrix< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< unsigned long long > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::M",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_M_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::M",1,"Std::StdMatrix< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_M_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::N",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_N_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::N",1,"Std::StdMatrix< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_N_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::StdMatrix",0,0)
  result = (Std::StdMatrix< u64_t > *)new Std::StdMatrix< u64_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Std::StdMatrix< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::StdMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::StdMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::StdMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdMatrix< u64_t > *)new Std::StdMatrix< u64_t >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< unsigned long long > *arg1 = 0 ;
  Std::StdMatrix< u64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::StdMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::StdMatrix",1,"Std::StdMatrix< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_UInt64Matrix",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result = (Std::StdMatrix< u64_t > *)new Std::StdMatrix< u64_t >((Std::StdMatrix< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt64Matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdMatrix< u64_t >::StdMatrix()\n"
    "    Std::StdMatrix< u64_t >::StdMatrix(size_t,size_t)\n"
    "    Std::StdMatrix< u64_t >::StdMatrix(Std::StdMatrix< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Matrix___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::operator ()",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< u64_t >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix___call",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long long *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::get",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< u64_t >::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_get",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (unsigned long long *) &(arg1)->get(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *arg4 = 0 ;
  unsigned long long temp4 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set",4,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_set",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(unsigned long long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,arg3,(unsigned long long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set_row",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set_row",3,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_set_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_set_row",3,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->set_row(arg2,(Std::StdVector< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set_col",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdMatrix< u64_t >::set_col",3,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_set_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_set_col",3,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->set_col(arg2,(Std::StdVector< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned long long > result;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::row",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_row",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    Std::StdVector< unsigned long long > * resultptr = new Std::StdVector< unsigned long long >((const Std::StdVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_col(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t arg2 ;
  Std::StdVector< unsigned long long > result;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::col",1,"Std::StdMatrix< u64_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdMatrix< u64_t >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_col",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    Std::StdVector< unsigned long long > * resultptr = new Std::StdVector< unsigned long long >((const Std::StdVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_random_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::random_shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::random_shuffle",1,"Std::StdMatrix< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_random_shuffle",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  (arg1)->random_shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::data",1,"Std::StdMatrix< u64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_data",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::size",1,"Std::StdMatrix< u64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_size",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result = ((Std::StdMatrix< u64_t > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::rows",1,"Std::StdMatrix< u64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_rows",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result = ((Std::StdMatrix< u64_t > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdMatrix< u64_t >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdMatrix< u64_t >::cols",1,"Std::StdMatrix< u64_t > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("UInt64Matrix_cols",1,SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t);
  }
  
  result = ((Std::StdMatrix< u64_t > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Matrix(void *obj) {
Std::StdMatrix< u64_t > *arg1 = (Std::StdMatrix< u64_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Matrix_attributes[] = {
    { "matrix", _wrap_UInt64Matrix_matrix_get, _wrap_UInt64Matrix_matrix_set },
    { "M", _wrap_UInt64Matrix_M_get, _wrap_UInt64Matrix_M_set },
    { "N", _wrap_UInt64Matrix_N_get, _wrap_UInt64Matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Matrix_methods[]= {
    { "__call", _wrap_UInt64Matrix___call},
    { "get", _wrap_UInt64Matrix_get},
    { "set", _wrap_UInt64Matrix_set},
    { "set_row", _wrap_UInt64Matrix_set_row},
    { "set_col", _wrap_UInt64Matrix_set_col},
    { "row", _wrap_UInt64Matrix_row},
    { "col", _wrap_UInt64Matrix_col},
    { "random_shuffle", _wrap_UInt64Matrix_random_shuffle},
    { "data", _wrap_UInt64Matrix_data},
    { "size", _wrap_UInt64Matrix_size},
    { "rows", _wrap_UInt64Matrix_rows},
    { "cols", _wrap_UInt64Matrix_cols},
    {0,0}
};
static swig_lua_method swig_UInt64Matrix_meta[] = {
    { "__call", _wrap_UInt64Matrix___call},
    {0,0}
};

static swig_lua_attribute swig_UInt64Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Matrix_Sf_SwigStatic = {
    "UInt64Matrix",
    swig_UInt64Matrix_Sf_SwigStatic_methods,
    swig_UInt64Matrix_Sf_SwigStatic_attributes,
    swig_UInt64Matrix_Sf_SwigStatic_constants,
    swig_UInt64Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Matrix_bases[] = {0};
static const char *swig_UInt64Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Matrix = { "UInt64Matrix", "UInt64Matrix", &SWIGTYPE_p_Std__StdMatrixT_unsigned_long_long_t,_proxy__wrap_new_UInt64Matrix, swig_delete_UInt64Matrix, swig_UInt64Matrix_methods, swig_UInt64Matrix_attributes, &swig_UInt64Matrix_Sf_SwigStatic, swig_UInt64Matrix_meta, swig_UInt64Matrix_bases, swig_UInt64Matrix_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("TYPE_STRING", Std::TYPE_STRING)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_CHAR", Std::TYPE_CHAR)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UCHAR", Std::TYPE_UCHAR)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT8", Std::TYPE_INT8)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT8", Std::TYPE_UINT8)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT16", Std::TYPE_INT16)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT16", Std::TYPE_UINT16)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT32", Std::TYPE_INT32)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT32", Std::TYPE_UINT32)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT64", Std::TYPE_INT64)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT64", Std::TYPE_UINT64)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_FLOAT", Std::TYPE_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_DOUBLE", Std::TYPE_DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_VOID", Std::TYPE_VOID)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "randint", _wrap_randint},
    { "randint64", _wrap_randint64},
    { "randchar", _wrap_randchar},
    { "randfloat", _wrap_randfloat},
    { "randdbl", _wrap_randdbl},
    { "flip", _wrap_flip},
    { "__lt", _wrap___lt},
    { "__eq", _wrap___eq},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_StdObject,
&_wrap_class_StdRandom,
&_wrap_class_StdRandomUniform,
&_wrap_class_StdRandomUniform64,
&_wrap_class_StdBitVector,
&_wrap_class_StdString,
&_wrap_class_StdStringMap,
&_wrap_class_Anything,
&_wrap_class_BasicType,
&_wrap_class_StringVector,
&_wrap_class_FloatVector,
&_wrap_class_DoubleVector,
&_wrap_class_Int8Vector,
&_wrap_class_UInt8Vector,
&_wrap_class_Int16Vector,
&_wrap_class_UInt16Vector,
&_wrap_class_Int32Vector,
&_wrap_class_UInt32Vector,
&_wrap_class_Int64Vector,
&_wrap_class_UInt64Vector,
&_wrap_class_StringMatrix,
&_wrap_class_FloatMatrix,
&_wrap_class_DoubleMatrix,
&_wrap_class_Int8Matrix,
&_wrap_class_UInt8Matrix,
&_wrap_class_Int16Matrix,
&_wrap_class_UInt16Matrix,
&_wrap_class_Int32Matrix,
&_wrap_class_UInt32Matrix,
&_wrap_class_Int64Matrix,
&_wrap_class_UInt64Matrix,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "Std",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Std__BasicTypeTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *)  ((Std::BasicType *) x));
}
static swig_type_info _swigt__p_Std__Anything = {"_p_Std__Anything", "Std::Anything *", 0, 0, (void*)&_wrap_class_Anything, 0};
static swig_type_info _swigt__p_Std__BasicType = {"_p_Std__BasicType", "Std::BasicType *", 0, 0, (void*)&_wrap_class_BasicType, 0};
static swig_type_info _swigt__p_Std__StdBitVector = {"_p_Std__StdBitVector", "Std::StdBitVector *", 0, 0, (void*)&_wrap_class_StdBitVector, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_Std__StdString_t = {"_p_Std__StdMatrixT_Std__StdString_t", "Std::StdMatrix< Std::StdString > *", 0, 0, (void*)&_wrap_class_StringMatrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_double_t = {"_p_Std__StdMatrixT_double_t", "Std::StdMatrix< double > *", 0, 0, (void*)&_wrap_class_DoubleMatrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_float_t = {"_p_Std__StdMatrixT_float_t", "Std::StdMatrix< float > *", 0, 0, (void*)&_wrap_class_FloatMatrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_int_t = {"_p_Std__StdMatrixT_int_t", "Std::StdMatrix< int32_t > *|Std::StdMatrix< int > *", 0, 0, (void*)&_wrap_class_Int32Matrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_long_long_t = {"_p_Std__StdMatrixT_long_long_t", "Std::StdMatrix< long long > *|Std::StdMatrix< i64_t > *", 0, 0, (void*)&_wrap_class_Int64Matrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_short_t = {"_p_Std__StdMatrixT_short_t", "Std::StdMatrix< short > *|Std::StdMatrix< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Matrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_signed_char_t = {"_p_Std__StdMatrixT_signed_char_t", "Std::StdMatrix< signed char > *|Std::StdMatrix< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Matrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_unsigned_char_t = {"_p_Std__StdMatrixT_unsigned_char_t", "Std::StdMatrix< unsigned char > *|Std::StdMatrix< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8Matrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_unsigned_int_t = {"_p_Std__StdMatrixT_unsigned_int_t", "Std::StdMatrix< uint32_t > *|Std::StdMatrix< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Matrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_unsigned_long_long_t = {"_p_Std__StdMatrixT_unsigned_long_long_t", "Std::StdMatrix< unsigned long long > *|Std::StdMatrix< u64_t > *", 0, 0, (void*)&_wrap_class_UInt64Matrix, 0};
static swig_type_info _swigt__p_Std__StdMatrixT_unsigned_short_t = {"_p_Std__StdMatrixT_unsigned_short_t", "Std::StdMatrix< unsigned short > *|Std::StdMatrix< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Matrix, 0};
static swig_type_info _swigt__p_Std__StdObject = {"_p_Std__StdObject", "Std::StdObject *", 0, 0, (void*)&_wrap_class_StdObject, 0};
static swig_type_info _swigt__p_Std__StdRandom = {"_p_Std__StdRandom", "Std::StdRandom *", 0, 0, (void*)&_wrap_class_StdRandom, 0};
static swig_type_info _swigt__p_Std__StdRandomUniform = {"_p_Std__StdRandomUniform", "Std::StdRandomUniform *", 0, 0, (void*)&_wrap_class_StdRandomUniform, 0};
static swig_type_info _swigt__p_Std__StdRandomUniform64 = {"_p_Std__StdRandomUniform64", "Std::StdRandomUniform64 *", 0, 0, (void*)&_wrap_class_StdRandomUniform64, 0};
static swig_type_info _swigt__p_Std__StdString = {"_p_Std__StdString", "Std::StdString *", 0, 0, (void*)&_wrap_class_StdString, 0};
static swig_type_info _swigt__p_Std__StdStringMap = {"_p_Std__StdStringMap", "Std::StdStringMap *", 0, 0, (void*)&_wrap_class_StdStringMap, 0};
static swig_type_info _swigt__p_Std__StdVectorT_Std__StdString_t = {"_p_Std__StdVectorT_Std__StdString_t", "Std::StdVector< Std::StdString > *", 0, 0, (void*)&_wrap_class_StringVector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_double_t = {"_p_Std__StdVectorT_double_t", "Std::StdVector< double > *", 0, 0, (void*)&_wrap_class_DoubleVector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_float_t = {"_p_Std__StdVectorT_float_t", "Std::StdVector< float > *", 0, 0, (void*)&_wrap_class_FloatVector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_int_t = {"_p_Std__StdVectorT_int_t", "Std::StdVector< int32_t > *|Std::StdVector< int > *", 0, 0, (void*)&_wrap_class_Int32Vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_long_long_t = {"_p_Std__StdVectorT_long_long_t", "Std::StdVector< long long > *|Std::StdVector< i64_t > *", 0, 0, (void*)&_wrap_class_Int64Vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_short_t = {"_p_Std__StdVectorT_short_t", "Std::StdVector< short > *|Std::StdVector< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_signed_char_t = {"_p_Std__StdVectorT_signed_char_t", "Std::StdVector< signed char > *|Std::StdVector< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_char_t = {"_p_Std__StdVectorT_unsigned_char_t", "Std::StdVector< unsigned char > *|Std::StdVector< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8Vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_int_t = {"_p_Std__StdVectorT_unsigned_int_t", "Std::StdVector< uint32_t > *|Std::StdVector< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_long_long_t = {"_p_Std__StdVectorT_unsigned_long_long_t", "Std::StdVector< unsigned long long > *|Std::StdVector< u64_t > *", 0, 0, (void*)&_wrap_class_UInt64Vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_short_t = {"_p_Std__StdVectorT_unsigned_short_t", "Std::StdVector< unsigned short > *|Std::StdVector< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Vector, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "i64_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_Std__StdString_t = {"_p_std__initializer_listT_Std__StdString_t", "std::initializer_list< Std::StdString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_double_t = {"_p_std__initializer_listT_double_t", "std::initializer_list< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_float_t = {"_p_std__initializer_listT_float_t", "std::initializer_list< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_int_t = {"_p_std__initializer_listT_int_t", "std::initializer_list< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_long_long_t = {"_p_std__initializer_listT_long_long_t", "std::initializer_list< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_short_t = {"_p_std__initializer_listT_short_t", "std::initializer_list< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_signed_char_t = {"_p_std__initializer_listT_signed_char_t", "std::initializer_list< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_char_t = {"_p_std__initializer_listT_unsigned_char_t", "std::initializer_list< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_int_t = {"_p_std__initializer_listT_unsigned_int_t", "std::initializer_list< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_long_long_t = {"_p_std__initializer_listT_unsigned_long_long_t", "std::initializer_list< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_short_t = {"_p_std__initializer_listT_unsigned_short_t", "std::initializer_list< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_Std__StdString_Std__StdString_t = {"_p_std__mapT_Std__StdString_Std__StdString_t", "std::map< Std::StdString,Std::StdString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Std__StdString_t = {"_p_std__vectorT_Std__StdString_t", "std::vector< Std::StdString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bool_t = {"_p_std__vectorT_bool_t", "std::vector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_t = {"_p_std__vectorT_char_t", "std::vector< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int64_t_t = {"_p_std__vectorT_int64_t_t", "std::vector< int64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int32_t > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_double_t = {"_p_std__vectorT_long_double_t", "std::vector< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_t = {"_p_std__vectorT_long_long_t", "std::vector< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *|std::vector< int16_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *|std::vector< int8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_uint64_t_t = {"_p_std__vectorT_uint64_t_t", "std::vector< uint64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *|std::vector< uint8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< uint32_t > *|std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_long_t = {"_p_std__vectorT_unsigned_long_long_t", "std::vector< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *|std::vector< uint16_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "u64_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Std__Anything,
  &_swigt__p_Std__BasicType,
  &_swigt__p_Std__StdBitVector,
  &_swigt__p_Std__StdMatrixT_Std__StdString_t,
  &_swigt__p_Std__StdMatrixT_double_t,
  &_swigt__p_Std__StdMatrixT_float_t,
  &_swigt__p_Std__StdMatrixT_int_t,
  &_swigt__p_Std__StdMatrixT_long_long_t,
  &_swigt__p_Std__StdMatrixT_short_t,
  &_swigt__p_Std__StdMatrixT_signed_char_t,
  &_swigt__p_Std__StdMatrixT_unsigned_char_t,
  &_swigt__p_Std__StdMatrixT_unsigned_int_t,
  &_swigt__p_Std__StdMatrixT_unsigned_long_long_t,
  &_swigt__p_Std__StdMatrixT_unsigned_short_t,
  &_swigt__p_Std__StdObject,
  &_swigt__p_Std__StdRandom,
  &_swigt__p_Std__StdRandomUniform,
  &_swigt__p_Std__StdRandomUniform64,
  &_swigt__p_Std__StdString,
  &_swigt__p_Std__StdStringMap,
  &_swigt__p_Std__StdVectorT_Std__StdString_t,
  &_swigt__p_Std__StdVectorT_double_t,
  &_swigt__p_Std__StdVectorT_float_t,
  &_swigt__p_Std__StdVectorT_int_t,
  &_swigt__p_Std__StdVectorT_long_long_t,
  &_swigt__p_Std__StdVectorT_short_t,
  &_swigt__p_Std__StdVectorT_signed_char_t,
  &_swigt__p_Std__StdVectorT_unsigned_char_t,
  &_swigt__p_Std__StdVectorT_unsigned_int_t,
  &_swigt__p_Std__StdVectorT_unsigned_long_long_t,
  &_swigt__p_Std__StdVectorT_unsigned_short_t,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int64_t,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__initializer_listT_Std__StdString_t,
  &_swigt__p_std__initializer_listT_double_t,
  &_swigt__p_std__initializer_listT_float_t,
  &_swigt__p_std__initializer_listT_int_t,
  &_swigt__p_std__initializer_listT_long_long_t,
  &_swigt__p_std__initializer_listT_short_t,
  &_swigt__p_std__initializer_listT_signed_char_t,
  &_swigt__p_std__initializer_listT_unsigned_char_t,
  &_swigt__p_std__initializer_listT_unsigned_int_t,
  &_swigt__p_std__initializer_listT_unsigned_long_long_t,
  &_swigt__p_std__initializer_listT_unsigned_short_t,
  &_swigt__p_std__mapT_Std__StdString_Std__StdString_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Std__StdString_t,
  &_swigt__p_std__vectorT_bool_t,
  &_swigt__p_std__vectorT_char_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int64_t_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_long_double_t,
  &_swigt__p_std__vectorT_long_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_uint64_t_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_uint64_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Std__Anything[] = {  {&_swigt__p_Std__Anything, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__BasicType[] = {  {&_swigt__p_Std__BasicType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdBitVector[] = {  {&_swigt__p_Std__StdBitVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_Std__StdString_t[] = {  {&_swigt__p_Std__StdMatrixT_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_double_t[] = {  {&_swigt__p_Std__StdMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_float_t[] = {  {&_swigt__p_Std__StdMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_int_t[] = {  {&_swigt__p_Std__StdMatrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_long_long_t[] = {  {&_swigt__p_Std__StdMatrixT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_short_t[] = {  {&_swigt__p_Std__StdMatrixT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_signed_char_t[] = {  {&_swigt__p_Std__StdMatrixT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_unsigned_char_t[] = {  {&_swigt__p_Std__StdMatrixT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_unsigned_int_t[] = {  {&_swigt__p_Std__StdMatrixT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_unsigned_long_long_t[] = {  {&_swigt__p_Std__StdMatrixT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdMatrixT_unsigned_short_t[] = {  {&_swigt__p_Std__StdMatrixT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdObject[] = {  {&_swigt__p_Std__BasicType, _p_Std__BasicTypeTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__StdObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdRandom[] = {  {&_swigt__p_Std__StdRandom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdRandomUniform[] = {  {&_swigt__p_Std__StdRandomUniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdRandomUniform64[] = {  {&_swigt__p_Std__StdRandomUniform64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdString[] = {  {&_swigt__p_Std__StdString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdStringMap[] = {  {&_swigt__p_Std__StdStringMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_Std__StdString_t[] = {  {&_swigt__p_Std__StdVectorT_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_double_t[] = {  {&_swigt__p_Std__StdVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_float_t[] = {  {&_swigt__p_Std__StdVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_int_t[] = {  {&_swigt__p_Std__StdVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_long_long_t[] = {  {&_swigt__p_Std__StdVectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_short_t[] = {  {&_swigt__p_Std__StdVectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_signed_char_t[] = {  {&_swigt__p_Std__StdVectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_char_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_int_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_long_long_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_short_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_Std__StdString_t[] = {  {&_swigt__p_std__initializer_listT_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_double_t[] = {  {&_swigt__p_std__initializer_listT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_float_t[] = {  {&_swigt__p_std__initializer_listT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_int_t[] = {  {&_swigt__p_std__initializer_listT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_long_long_t[] = {  {&_swigt__p_std__initializer_listT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_short_t[] = {  {&_swigt__p_std__initializer_listT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_signed_char_t[] = {  {&_swigt__p_std__initializer_listT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_char_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_int_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_long_long_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_short_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_Std__StdString_Std__StdString_t[] = {  {&_swigt__p_std__mapT_Std__StdString_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Std__StdString_t[] = {  {&_swigt__p_std__vectorT_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_t[] = {  {&_swigt__p_std__vectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t[] = {  {&_swigt__p_std__vectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int64_t_t[] = {  {&_swigt__p_std__vectorT_int64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_double_t[] = {  {&_swigt__p_std__vectorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_t[] = {  {&_swigt__p_std__vectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_uint64_t_t[] = {  {&_swigt__p_std__vectorT_uint64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Std__Anything,
  _swigc__p_Std__BasicType,
  _swigc__p_Std__StdBitVector,
  _swigc__p_Std__StdMatrixT_Std__StdString_t,
  _swigc__p_Std__StdMatrixT_double_t,
  _swigc__p_Std__StdMatrixT_float_t,
  _swigc__p_Std__StdMatrixT_int_t,
  _swigc__p_Std__StdMatrixT_long_long_t,
  _swigc__p_Std__StdMatrixT_short_t,
  _swigc__p_Std__StdMatrixT_signed_char_t,
  _swigc__p_Std__StdMatrixT_unsigned_char_t,
  _swigc__p_Std__StdMatrixT_unsigned_int_t,
  _swigc__p_Std__StdMatrixT_unsigned_long_long_t,
  _swigc__p_Std__StdMatrixT_unsigned_short_t,
  _swigc__p_Std__StdObject,
  _swigc__p_Std__StdRandom,
  _swigc__p_Std__StdRandomUniform,
  _swigc__p_Std__StdRandomUniform64,
  _swigc__p_Std__StdString,
  _swigc__p_Std__StdStringMap,
  _swigc__p_Std__StdVectorT_Std__StdString_t,
  _swigc__p_Std__StdVectorT_double_t,
  _swigc__p_Std__StdVectorT_float_t,
  _swigc__p_Std__StdVectorT_int_t,
  _swigc__p_Std__StdVectorT_long_long_t,
  _swigc__p_Std__StdVectorT_short_t,
  _swigc__p_Std__StdVectorT_signed_char_t,
  _swigc__p_Std__StdVectorT_unsigned_char_t,
  _swigc__p_Std__StdVectorT_unsigned_int_t,
  _swigc__p_Std__StdVectorT_unsigned_long_long_t,
  _swigc__p_Std__StdVectorT_unsigned_short_t,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int64_t,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__initializer_listT_Std__StdString_t,
  _swigc__p_std__initializer_listT_double_t,
  _swigc__p_std__initializer_listT_float_t,
  _swigc__p_std__initializer_listT_int_t,
  _swigc__p_std__initializer_listT_long_long_t,
  _swigc__p_std__initializer_listT_short_t,
  _swigc__p_std__initializer_listT_signed_char_t,
  _swigc__p_std__initializer_listT_unsigned_char_t,
  _swigc__p_std__initializer_listT_unsigned_int_t,
  _swigc__p_std__initializer_listT_unsigned_long_long_t,
  _swigc__p_std__initializer_listT_unsigned_short_t,
  _swigc__p_std__mapT_Std__StdString_Std__StdString_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Std__StdString_t,
  _swigc__p_std__vectorT_bool_t,
  _swigc__p_std__vectorT_char_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int64_t_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_long_double_t,
  _swigc__p_std__vectorT_long_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_uint64_t_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_uint64_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

