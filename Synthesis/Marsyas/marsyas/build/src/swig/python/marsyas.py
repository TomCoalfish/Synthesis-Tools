# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _marsyas
else:
    import _marsyas

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _marsyas.delete_SwigPyIterator

    def value(self):
        return _marsyas.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _marsyas.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _marsyas.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _marsyas.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _marsyas.SwigPyIterator_equal(self, x)

    def copy(self):
        return _marsyas.SwigPyIterator_copy(self)

    def next(self):
        return _marsyas.SwigPyIterator_next(self)

    def __next__(self):
        return _marsyas.SwigPyIterator___next__(self)

    def previous(self):
        return _marsyas.SwigPyIterator_previous(self)

    def advance(self, n):
        return _marsyas.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _marsyas.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _marsyas.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _marsyas.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _marsyas.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _marsyas.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _marsyas.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _marsyas:
_marsyas.SwigPyIterator_swigregister(SwigPyIterator)

class Map_String_MarControlPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _marsyas.Map_String_MarControlPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _marsyas.Map_String_MarControlPtr___nonzero__(self)

    def __bool__(self):
        return _marsyas.Map_String_MarControlPtr___bool__(self)

    def __len__(self):
        return _marsyas.Map_String_MarControlPtr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _marsyas.Map_String_MarControlPtr___getitem__(self, key)

    def __delitem__(self, key):
        return _marsyas.Map_String_MarControlPtr___delitem__(self, key)

    def has_key(self, key):
        return _marsyas.Map_String_MarControlPtr_has_key(self, key)

    def keys(self):
        return _marsyas.Map_String_MarControlPtr_keys(self)

    def values(self):
        return _marsyas.Map_String_MarControlPtr_values(self)

    def items(self):
        return _marsyas.Map_String_MarControlPtr_items(self)

    def __contains__(self, key):
        return _marsyas.Map_String_MarControlPtr___contains__(self, key)

    def key_iterator(self):
        return _marsyas.Map_String_MarControlPtr_key_iterator(self)

    def value_iterator(self):
        return _marsyas.Map_String_MarControlPtr_value_iterator(self)

    def __setitem__(self, *args):
        return _marsyas.Map_String_MarControlPtr___setitem__(self, *args)

    def asdict(self):
        return _marsyas.Map_String_MarControlPtr_asdict(self)

    def __init__(self, *args):
        _marsyas.Map_String_MarControlPtr_swiginit(self, _marsyas.new_Map_String_MarControlPtr(*args))

    def empty(self):
        return _marsyas.Map_String_MarControlPtr_empty(self)

    def size(self):
        return _marsyas.Map_String_MarControlPtr_size(self)

    def swap(self, v):
        return _marsyas.Map_String_MarControlPtr_swap(self, v)

    def begin(self):
        return _marsyas.Map_String_MarControlPtr_begin(self)

    def end(self):
        return _marsyas.Map_String_MarControlPtr_end(self)

    def rbegin(self):
        return _marsyas.Map_String_MarControlPtr_rbegin(self)

    def rend(self):
        return _marsyas.Map_String_MarControlPtr_rend(self)

    def clear(self):
        return _marsyas.Map_String_MarControlPtr_clear(self)

    def get_allocator(self):
        return _marsyas.Map_String_MarControlPtr_get_allocator(self)

    def count(self, x):
        return _marsyas.Map_String_MarControlPtr_count(self, x)

    def erase(self, *args):
        return _marsyas.Map_String_MarControlPtr_erase(self, *args)

    def find(self, x):
        return _marsyas.Map_String_MarControlPtr_find(self, x)

    def lower_bound(self, x):
        return _marsyas.Map_String_MarControlPtr_lower_bound(self, x)

    def upper_bound(self, x):
        return _marsyas.Map_String_MarControlPtr_upper_bound(self, x)
    __swig_destroy__ = _marsyas.delete_Map_String_MarControlPtr

# Register Map_String_MarControlPtr in _marsyas:
_marsyas.Map_String_MarControlPtr_swigregister(Map_String_MarControlPtr)

class MarSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def tick(self):
        return _marsyas.MarSystem_tick(self)

    def process(self, _in, out):
        return _marsyas.MarSystem_process(self, _in, out)

    def update(self):
        return _marsyas.MarSystem_update(self)

    def addMarSystem(self, msys):
        return _marsyas.MarSystem_addMarSystem(self, msys)

    def setParent(self, parent):
        return _marsyas.MarSystem_setParent(self, parent)

    def getChildMarSystem(self, childPath):
        return _marsyas.MarSystem_getChildMarSystem(self, childPath)

    def getType(self):
        return _marsyas.MarSystem_getType(self)

    def getName(self):
        return _marsyas.MarSystem_getName(self)

    def getPrefix(self):
        return _marsyas.MarSystem_getPrefix(self)

    def toString(self):
        return _marsyas.MarSystem_toString(self)

    def toStringShort(self):
        return _marsyas.MarSystem_toStringShort(self)

    def setControl(self, arg2, arg3):
        return _marsyas.MarSystem_setControl(self, arg2, arg3)

    def getControl(self, arg2):
        return _marsyas.MarSystem_getControl(self, arg2)

    def hasControl(self, arg2):
        return _marsyas.MarSystem_hasControl(self, arg2)

    def linkControl(self, arg2, arg3):
        return _marsyas.MarSystem_linkControl(self, arg2, arg3)

    def getControls(self):
        return _marsyas.MarSystem_getControls(self)

    def updControl(self, *args):
        return _marsyas.MarSystem_updControl(self, *args)

    def toHtml(self):
        return _marsyas.MarSystem_toHtml(self)
    __swig_destroy__ = _marsyas.delete_MarSystem

# Register MarSystem in _marsyas:
_marsyas.MarSystem_swigregister(MarSystem)

class Vector_String(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _marsyas.Vector_String_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _marsyas.Vector_String___nonzero__(self)

    def __bool__(self):
        return _marsyas.Vector_String___bool__(self)

    def __len__(self):
        return _marsyas.Vector_String___len__(self)

    def __getslice__(self, i, j):
        return _marsyas.Vector_String___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _marsyas.Vector_String___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _marsyas.Vector_String___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _marsyas.Vector_String___delitem__(self, *args)

    def __getitem__(self, *args):
        return _marsyas.Vector_String___getitem__(self, *args)

    def __setitem__(self, *args):
        return _marsyas.Vector_String___setitem__(self, *args)

    def pop(self):
        return _marsyas.Vector_String_pop(self)

    def append(self, x):
        return _marsyas.Vector_String_append(self, x)

    def empty(self):
        return _marsyas.Vector_String_empty(self)

    def size(self):
        return _marsyas.Vector_String_size(self)

    def swap(self, v):
        return _marsyas.Vector_String_swap(self, v)

    def begin(self):
        return _marsyas.Vector_String_begin(self)

    def end(self):
        return _marsyas.Vector_String_end(self)

    def rbegin(self):
        return _marsyas.Vector_String_rbegin(self)

    def rend(self):
        return _marsyas.Vector_String_rend(self)

    def clear(self):
        return _marsyas.Vector_String_clear(self)

    def get_allocator(self):
        return _marsyas.Vector_String_get_allocator(self)

    def pop_back(self):
        return _marsyas.Vector_String_pop_back(self)

    def erase(self, *args):
        return _marsyas.Vector_String_erase(self, *args)

    def __init__(self, *args):
        _marsyas.Vector_String_swiginit(self, _marsyas.new_Vector_String(*args))

    def push_back(self, x):
        return _marsyas.Vector_String_push_back(self, x)

    def front(self):
        return _marsyas.Vector_String_front(self)

    def back(self):
        return _marsyas.Vector_String_back(self)

    def assign(self, n, x):
        return _marsyas.Vector_String_assign(self, n, x)

    def resize(self, *args):
        return _marsyas.Vector_String_resize(self, *args)

    def insert(self, *args):
        return _marsyas.Vector_String_insert(self, *args)

    def reserve(self, n):
        return _marsyas.Vector_String_reserve(self, n)

    def capacity(self):
        return _marsyas.Vector_String_capacity(self)
    __swig_destroy__ = _marsyas.delete_Vector_String

# Register Vector_String in _marsyas:
_marsyas.Vector_String_swigregister(Vector_String)

class MarSystemManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _marsyas.MarSystemManager_swiginit(self, _marsyas.new_MarSystemManager())

    def create(self, *args):
        return _marsyas.MarSystemManager_create(self, *args)

    def loadFromFile(self, arg2):
        return _marsyas.MarSystemManager_loadFromFile(self, arg2)

    def registerPrototype(self, arg2, arg3):
        return _marsyas.MarSystemManager_registerPrototype(self, arg2, arg3)

    def registeredPrototypes(self):
        return _marsyas.MarSystemManager_registeredPrototypes(self)

    def getMarSystem(self, src, parent=None):
        return _marsyas.MarSystemManager_getMarSystem(self, src, parent)
    __swig_destroy__ = _marsyas.delete_MarSystemManager

# Register MarSystemManager in _marsyas:
_marsyas.MarSystemManager_swigregister(MarSystemManager)

class MarControlPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _marsyas.MarControlPtr_swiginit(self, _marsyas.new_MarControlPtr(*args))
    __swig_destroy__ = _marsyas.delete_MarControlPtr

    def isInvalid(self):
        return _marsyas.MarControlPtr_isInvalid(self)

    @staticmethod
    def from_natural(x):
        return _marsyas.MarControlPtr_from_natural(x)

    @staticmethod
    def from_real(x):
        return _marsyas.MarControlPtr_from_real(x)

    @staticmethod
    def from_bool(x):
        return _marsyas.MarControlPtr_from_bool(x)

    @staticmethod
    def from_string(x):
        return _marsyas.MarControlPtr_from_string(x)

    @staticmethod
    def from_realvec(x):
        return _marsyas.MarControlPtr_from_realvec(x)

    def getType(self):
        return _marsyas.MarControlPtr_getType(self)

    def getName(self):
        return _marsyas.MarControlPtr_getName(self)

    def setValue_natural(self, x):
        return _marsyas.MarControlPtr_setValue_natural(self, x)

    def setValue_real(self, x):
        return _marsyas.MarControlPtr_setValue_real(self, x)

    def setValue_bool(self, x):
        return _marsyas.MarControlPtr_setValue_bool(self, x)

    def setValue_string(self, x):
        return _marsyas.MarControlPtr_setValue_string(self, x)

    def setValue_realvec(self, x):
        return _marsyas.MarControlPtr_setValue_realvec(self, x)

    def to_natural(self):
        return _marsyas.MarControlPtr_to_natural(self)

    def to_real(self):
        return _marsyas.MarControlPtr_to_real(self)

    def to_string(self):
        return _marsyas.MarControlPtr_to_string(self)

    def to_bool(self):
        return _marsyas.MarControlPtr_to_bool(self)

    def to_realvec(self):
        return _marsyas.MarControlPtr_to_realvec(self)

# Register MarControlPtr in _marsyas:
_marsyas.MarControlPtr_swigregister(MarControlPtr)

def MarControlPtr_from_natural(x):
    return _marsyas.MarControlPtr_from_natural(x)

def MarControlPtr_from_real(x):
    return _marsyas.MarControlPtr_from_real(x)

def MarControlPtr_from_bool(x):
    return _marsyas.MarControlPtr_from_bool(x)

def MarControlPtr_from_string(x):
    return _marsyas.MarControlPtr_from_string(x)

def MarControlPtr_from_realvec(x):
    return _marsyas.MarControlPtr_from_realvec(x)

class realvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _marsyas.realvec_swiginit(self, _marsyas.new_realvec(*args))
    __swig_destroy__ = _marsyas.delete_realvec

    def maxval(self):
        return _marsyas.realvec_maxval(self)

    def minval(self):
        return _marsyas.realvec_minval(self)

    def mean(self):
        return _marsyas.realvec_mean(self)

    def median(self):
        return _marsyas.realvec_median(self)

    def sum(self):
        return _marsyas.realvec_sum(self)

    def std(self):
        return _marsyas.realvec_std(self)

    def var(self):
        return _marsyas.realvec_var(self)

    def getRows(self):
        return _marsyas.realvec_getRows(self)

    def getCols(self):
        return _marsyas.realvec_getCols(self)

    def getSize(self):
        return _marsyas.realvec_getSize(self)

    def getData(self):
        return _marsyas.realvec_getData(self)

    def transpose(self):
        return _marsyas.realvec_transpose(self)

    def sort(self):
        return _marsyas.realvec_sort(self)

    def abs(self):
        return _marsyas.realvec_abs(self)

    def sqr(self):
        return _marsyas.realvec_sqr(self)

    def sqroot(self):
        return _marsyas.realvec_sqroot(self)

    def normMaxMin(self):
        return _marsyas.realvec_normMaxMin(self)

    def stretch(self, size):
        return _marsyas.realvec_stretch(self, size)

    def setval(self, *args):
        return _marsyas.realvec_setval(self, *args)

    def appendRealvec(self, newValues):
        return _marsyas.realvec_appendRealvec(self, newValues)

    def apply(self, func):
        return _marsyas.realvec_apply(self, func)

    def norm(self, *args):
        return _marsyas.realvec_norm(self, *args)

    def renorm(self, old_mean, old_std, new_mean, new_std):
        return _marsyas.realvec_renorm(self, old_mean, old_std, new_mean, new_std)

    def getSubVector(self, startPos, length):
        return _marsyas.realvec_getSubVector(self, startPos, length)

    def covariance(self, res):
        return _marsyas.realvec_covariance(self, res)

    def covariance2(self, res):
        return _marsyas.realvec_covariance2(self, res)

    def search(self, val):
        return _marsyas.realvec_search(self, val)

    def __str__(self):
        return _marsyas.realvec___str__(self)

    def print_(self):
        return _marsyas.realvec_print_(self)

    def __len__(self):
        return _marsyas.realvec___len__(self)

    def __getitem__(self, i):
        return _marsyas.realvec___getitem__(self, i)

    def __setitem__(self, i, x):
        return _marsyas.realvec___setitem__(self, i, x)

# Register realvec in _marsyas:
_marsyas.realvec_swigregister(realvec)


def system_from_script(*args):
    return _marsyas.system_from_script(*args)

def system_from_script_file(filename, mng=None):
    return _marsyas.system_from_script_file(filename, mng)
class Collection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _marsyas.Collection_swiginit(self, _marsyas.new_Collection())
    __swig_destroy__ = _marsyas.delete_Collection

    def size(self):
        return _marsyas.Collection_size(self)

    def setName(self, name):
        return _marsyas.Collection_setName(self, name)

    def entry(self, i):
        return _marsyas.Collection_entry(self, i)

    def labelEntry(self, i):
        return _marsyas.Collection_labelEntry(self, i)

    def getSize(self):
        return _marsyas.Collection_getSize(self)

    def getNumLabels(self):
        return _marsyas.Collection_getNumLabels(self)

    def getLabelNames(self):
        return _marsyas.Collection_getLabelNames(self)

    def labelNum(self, label):
        return _marsyas.Collection_labelNum(self, label)

    def labelName(self, i):
        return _marsyas.Collection_labelName(self, i)

    def hasLabels(self):
        return _marsyas.Collection_hasLabels(self)

    def add(self, *args):
        return _marsyas.Collection_add(self, *args)

    def name(self):
        return _marsyas.Collection_name(self)

    def shuffle(self):
        return _marsyas.Collection_shuffle(self)

    def read(self, filename):
        return _marsyas.Collection_read(self, filename)

    def write(self, filename):
        return _marsyas.Collection_write(self, filename)

    def labelAll(self, label):
        return _marsyas.Collection_labelAll(self, label)

    def toLongString(self):
        return _marsyas.Collection_toLongString(self)

    def concatenate(self, cls):
        return _marsyas.Collection_concatenate(self, cls)

# Register Collection in _marsyas:
_marsyas.Collection_swigregister(Collection)



