# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _realvec
else:
    import _realvec

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class realvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _realvec.realvec_swiginit(self, _realvec.new_realvec(*args))
    __swig_destroy__ = _realvec.delete_realvec

    def maxval(self):
        return _realvec.realvec_maxval(self)

    def minval(self):
        return _realvec.realvec_minval(self)

    def mean(self):
        return _realvec.realvec_mean(self)

    def median(self):
        return _realvec.realvec_median(self)

    def sum(self):
        return _realvec.realvec_sum(self)

    def std(self):
        return _realvec.realvec_std(self)

    def var(self):
        return _realvec.realvec_var(self)

    def getRows(self):
        return _realvec.realvec_getRows(self)

    def getCols(self):
        return _realvec.realvec_getCols(self)

    def getSize(self):
        return _realvec.realvec_getSize(self)

    def getData(self):
        return _realvec.realvec_getData(self)

    def transpose(self):
        return _realvec.realvec_transpose(self)

    def sort(self):
        return _realvec.realvec_sort(self)

    def abs(self):
        return _realvec.realvec_abs(self)

    def sqr(self):
        return _realvec.realvec_sqr(self)

    def sqroot(self):
        return _realvec.realvec_sqroot(self)

    def normMaxMin(self):
        return _realvec.realvec_normMaxMin(self)

    def stretch(self, size):
        return _realvec.realvec_stretch(self, size)

    def setval(self, *args):
        return _realvec.realvec_setval(self, *args)

    def appendRealvec(self, newValues):
        return _realvec.realvec_appendRealvec(self, newValues)

    def apply(self, func):
        return _realvec.realvec_apply(self, func)

    def norm(self, *args):
        return _realvec.realvec_norm(self, *args)

    def renorm(self, old_mean, old_std, new_mean, new_std):
        return _realvec.realvec_renorm(self, old_mean, old_std, new_mean, new_std)

    def getSubVector(self, startPos, length):
        return _realvec.realvec_getSubVector(self, startPos, length)

    def covariance(self, res):
        return _realvec.realvec_covariance(self, res)

    def covariance2(self, res):
        return _realvec.realvec_covariance2(self, res)

    def search(self, val):
        return _realvec.realvec_search(self, val)

# Register realvec in _realvec:
_realvec.realvec_swigregister(realvec)



