/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Effects/VAStateVariableFilter.h"

// Parameter class files:
#include "Parameters/FloatParameter.h"
#include "Parameters/FilterTypeParam.h"
#include "Parameters/CutoffPitchParam.h"
#include "Parameters/ResonanceParam.h"
#include "Parameters/ShelfGainParam.h"

//==============================================================================
/**
*/
class VAStateVariableFilterProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    VAStateVariableFilterProcessor();
    ~VAStateVariableFilterProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override					{ return true; }

    //==============================================================================
    const String getName() const override			{ return JucePlugin_Name; }
    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override										{ return 1; }
    int getCurrentProgram() override									{ return 0; }

    void setCurrentProgram(int index) override {}
    const String getProgramName(int index) override { return "Default"; }
    void changeProgramName(int index, const String& newName) override {}

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    //==============================================================================
    // These properties are public so that the editor component can access them

    // Used to persist the UI's size. The UI will update them (along with other 
    // parameters) when it gets resized.
    int lastUIWidth, lastUIHeight;

    // Parameters
    AudioProcessorParameter* filterType;	// Filter's type (LP, BP, HP, Notch, etc.)
    AudioProcessorParameter* cutoff;		// Filter's cutoff in pitch (MIDI)
    AudioProcessorParameter* resonance;		// Filter's resonance (0-1)
    AudioProcessorParameter* shelfGain;	// Filter's peak gain (for Peak, HS, LS)

private:
    //==============================================================================
    VAStateVariableFilter svfFilter;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (VAStateVariableFilterProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
